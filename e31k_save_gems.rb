puts '                                      Сохранение в фаил в консоли'

# работает и в досе и в юниксе. Это фича операционки а не Руби.

# >  Символ перенаправления ввода. Замещает фаил если он уже существует, так что нужно быть осторожнее
# Если у нас есть некий вывод на экран(консоль) и мы хотим сохранить его в фаил:
a = gets.strip
puts "Your word is #{a}"
# Тогда в консоли вводим(для данного фаила и расположения):
# PS E:\doc\ruby_exemples> ruby example4m.rb > fale.txt
# ruby имя_фаила.rb > fale.txt(расширение не обязательно такое например html)
# В итоге создается txt фаил содержащий результат вывода в консоли фаила example4m.rb

# >>  Другой оператор перенаправления ввода. Не замещает фаил, а просто дописывает в конец уже существующего фаила.


puts
puts '                                         Установка gem’ов'

# https://www.youtube.com/watch?v=knZcY9iFTD0     урок по гемам

# Дополнительные библиотеки бывают стандартные(Std-lib входят в сам руби) и те что пишут сами пользователи - гемы.

# В других языках gem’ы называются библиотеками (library) или пакетами (package).

# В Ruby система работы с библиотеками называется RubyGems. Она устанавливается вместе с Ruby. Так же автоматически устанавливается несколькр основных библиотек.

# https://rubygems.org/gems     большинство(все?) гемы хранятся тут, отсюда и качаются
# https://www.ruby-toolbox.com/    все необходимые гемы, лучше всего смотреть информацию тут

# gem -v        проверить версию RubyGems
# gem update --system      обновить RubyGems до последней версии

# Для установки gem’а используется команда gem, которая является частью пакета языка руби (также как и irb и ruby).
# Гемы устанавливаются в специальные директории Руби выделенные для библиотек

# По-умолчанию, для быстроты выполнения программы, абсолютно все установленные gem’ы не загружаются. Поэтому нужно воспользоваться специальным синтаксисом и написать require 'gemname'. Разумеется, что gem при этом должен быть установлен в вашей системе. С точки зрения руби gem это просто сторонний код, который написал какой-то неизвестный разработчик. Поэтому при установке gem’ов (команда gem install …) они скачиваются из Интернета, а при require они загружаются в память с вашего диска.
# Примечание: в Rails, достаточно поместить gem в специальный список (файл Gemfile), и если все сделать правильно, то все gem’ы из этого списка будут загружены в память автоматически.

# Пример установки на gem’е Cowsay
# > gem install cowsay  #(Windows)     # запуск > cowsay "какой-то текст"
# $ gem install cowsay  #(Linux, Mac)

# gem list  -  список всех установленных гемов


puts
puts '                                             Gemfile и Gemfile.lock'

# Gemfile - (название именно такое без расширений)это фаил с инструкциями по установке гемов необходимых для приложения

# Пример содержания фаила Gemfile(в данном случае для приложения на Синатре с ActiveRecord)
source "https://rubygems.org"

gem "sinatra"
gem "sinatra-contrib"  # этот гем содержит sinatra-reloader(на самом деле это тоже разработческий гем и соотв можно поместить в group :development и его тоже)
gem "sqlite3"
gem "activerecord"
gem "sinatra-activerecord"
gem "rake"

group :development do # означает, что когда мы зальем приложение на хостинг, будет понятно что этот гем нужен исключительно для разработки, а не для работы приложения, поэтому в продакшен режиме он будет пропущен
  gem "tux"
end

# bundle install  - установка(из активной директории в которой лежит Gemfile)(может немного тупить)

# После установки в фаиле Gemfile.lock (Нужно создать заранее??) появятся записи. Они нужны для того чтоб в нашем приложении не было конфликта различных версий гемов(в этом фаиле были внесены и залочены определенные версии гемов)


puts
puts '                                             гем pry'

# pry (читается как прай). Страница gem’a на GitHub: https://github.com/pry/pry     http://pry.github.io/
# “An IRB alternative and runtime developer console”. Другими словами, альтернатива уже известному нам REPL - IRB. В pry реализовано больше возможностей, чем в irb. Если раньше мы вводили команду “irb”, то теперь будем вводить команду “pry”

# $ gem install pry  #(Установка)
# $ gem install pry pry-doc  #(Установка)
# $ pry  #(запуск)
# > which pry  # Проверка установлен ли pry в вашей системе

# Ругается на виндоус(но работает), просит почитать документацию для корректной работы на виндоус:
#For a better Pry experience on Windows, please use ansicon:
  #https://github.com/adoxa/ansicon
#If you use an alternative to ansicon and don't want to see this warning again,
#you can add "Pry.config.windows_console_warning = false" to your pryrc.

# Команды внутри pry:
# help - выводит справку по возможным командам( По каждой команде из этого списка можно получить подробную справку, если ввести название команды и через пробел в конце добавить -h: [1] pry(main)> whereami -h)


puts
#  важный момент в pry — конфигурация. Gem это, грубо говоря, плагин для языка(или экосистемы) руби. Но и для «плагина» pry существует свое множество плагинов:

# «awesome print». Gem содержит в себе библиотеку кода, плагин для pry, плагин для irb. Страница gem’a⁴¹ на GitHub: https://github.com/awesome-print/awesome_print
# > gem install awesome_print  #(установка)

# (ОШИБКА при подключении - системе не удается найти указанный путь)
# Подключение(Гем awesome_print подключается к pry только один раз на вашем компьютере):
# > cat > ~/.pryrc          # запускаем в терминале команду cat, которая считывает из стандартного ввода следующие две строки (мы должны их ввести с клавиатуры).
# require 'awesome_print'
# AwesomePrint.pry!
# ^D                        # В конце мы нажимаем Ctrl+D — комбинацию, которая говорит о том, что ввод закончен (в листинге выше это обозначается как ^D)

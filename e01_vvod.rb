puts '                                Ruby - File I/O(файловый ввод-вывод)'

# Ruby предоставляет целый набор методов, связанных с вводом-выводом, реализованных в модуле ядра. Все методы ввода-вывода являются производными от класса IO.

puts RUBY_VERSION # вывод номера текущей версии руби
puts RUBY_PATCHLEVEL.to_s # вывод номера патча текущей версии руби

# Класс IO предоставляет все основные методы, такие как read, write, gets, puts, readline, getc и printf .

puts '                              Операторы вывода(puts, print, p, pp, ap)'

# print и puts это операторы(функции) вывода. puts после вывода переходит на след строку(содержит \n) а print нет
print "Hi Ruby"
puts "Привет Руби" # put(положить)s(string-строка). Соответсвенно puts обзначает - положить строку на экран
# После каждого использования puts (или print) вы видите «nil» — это происходит потому, что любой метод в ruby возвращает какое то значение, и puts/print возвращают ничего, специальный объект — nil.

# putc это оператор для вывода по одному символу за раз.
str = "Hello Ruby!"
putc str #=> H

# Метод p для вывода использует метод .inspect, который есть у любого объекта в руби.
p "Hello World!" #"Hello World!" #=> "Hello World!"
# Важно, что метод p возвращает уже не nil, а сам объект, который ему передали.

# Метод pp (от англ. pretty print) — это специальная версия p, которая выводит аргумент в более читаемом виде.
h = {some: 1, "the" => {subone: "true", subtwo: [1,2,"3333", {subsub: "one", nonenone: {twotwo: [{keyone: 1, keytwo: ["222","sdsd"]},1,2], some: "free"}}]}, ne: "xt"}
pp h

# ap - ещё более «крутой» способ вывести что-то — гем awesome_print. Установить его можно командой:
#gem install awesome_print
# Далее в irb необходимо включить гем
#> require "awesome_print"
#=> true
# ap выводит данные не только в удобочитаемом виде, но ещё и с нужными отступами, а также печатает значение индекса рядом с каждым элементом массива


puts
puts "boba
biba" # Можно переходить на другую строку посреди текста(без нового puts) строка будет являться "boba\nbiba"

# Вывод разных данных(в том числе переменных) через запятую. Использование \n  в виде ,"\n"  после любых строк вывода
a = 2
print 'фис', 1, "aaaaa\n", 'abc', a, "gkg", 3, '  ', "\n" #=> "фис"1"aaaaa\n""abc"2"gkg"3" ""\n"


puts
puts '                                               Специальные символы'

# специальные символы. Это те что не вводятся с кнопки клавиатуры. Вводятся при помощи управляющего символа \
# \n - (new line/line feed(lf)) символ перехода на следующую строку(обрабатывается на уровне операционной системы)
print "большая\n"
puts "зеленая\nили синяя"

puts
# \t - (tab) символ табуляции. Применяется для выравнивания(обрабатывается на уровне операционной системы)
# Горизонтальная табуляция (HT, TAB) — управляющий символ таблицы ASCII с кодом 0916, используется для выравнивания текста в строках. Встретив этот символ, терминал перемещает каретку (или курсор) вправо на ближайшую позицию табуляции. Традиционно эти позиции располагаются каждые 8 знакомест, в колонках 1, 9, 17, 25…
puts "\tодин\tдва\tтри\tчетыре"
puts "\t1\t2\t3\t4"
puts "\t2\t4\t6\t8"

puts
# \r - (return/carriage return(cr)) возвращает курсор на начало строки(возврат коретки - пошло от печатных машинок) (обрабатывается на уровне операционной системы)
puts "Вася\rПетя" # => Петя(в irb)    #=> Вася\nПетя при альт+R
puts "Вася\rП"    # => Пася(в irb)    #=> Вася\nП при альт+R

puts
# Спецсимвол \ обрабатываемый Руби, чтобы выводить спецсимволы "превратив" их обычную строку:
puts "\\" #=> \


puts
puts( # Скобки позволяет начать со след строчки, а иначе кавычки нужно открывать на той же строке
<<-eos
Sample string :
a string that you "don't" have to escape
eos
)  # <<-eos  eos  - вариант кавычек внутри которых можно ставить кавычки без \


# разбить длинную строку можно указав обратный слэш:
puts ' ... ' \
' ... '


# Хитрый способ очистить экран
puts "\e[H\e[2J"


# Многострочный коментарий:
=begin
Это тоже комментарий, но в несколько строк.
Чтобы такое сделать, нужно в начале и конце комментария написать =begin и = end, каждый — в начале новой строки.
=end

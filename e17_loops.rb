puts '                                      Циклы: while, loop и for и antil'

# Циклы в Ruby используются для выполнения одного и того же блока кода определенное количество раз

# Переменная заданная в теле цикла, существует только внутри цикла


puts '                                          Цикл while(while true)'

# Цикл while подходит для работы с одним условием
# Условие цикла while отделяется от кода зарезервированным словом do, новой строкой, обратной косой чертой \ или точкой с запятой
i = 0
while i <= 5 #Условие цикла while("пока"). Пока условие является истинной(true) цикл будет выпоняться
  print i
  i += 1 # Можно ставить операцию где угодно в теле цикла
end
# Цикл перезапускается пока условие будет true. Выводит столько значений(если в теле цикла есть оператор вывода) сколько их будет до того пока условие не станет false. Если условие не меняется(while 2+2=4) и постоянно является true то цикл будет выполняться бесконечное колличество раз.

puts
# Может содержать несколько условий
a, b = 10, 5
while a == 10 and b < 8
  puts a + b
  b += 1
end

# Пример прграммы угадайки:
def ugadaika()
  secret = "Blue"
  gues = ""
  while gues != secret
    puts "Угадайте цвет: "
    gues = gets().strip.capitalize
    puts "Цвет угадан неверно, попробуйте еще раз:" if gues != secret
  end
  puts "Цвет угадан верно"
end


puts
puts '                               Цикл until. Циклы с постусловием begin while/antil'

# Цикл until ("пока не") с предусловием. Выполняет код , пока условие имеет значение false. Условие оператора until отделяется от кода зарезервированным словом do , новой строкой или точкой с запятой.
i = 0
until i == list.size do
  print "#{list[i]} "
  i += 1
end

puts
# Цикл while с проверкой в конце. Если модификатор while следует за оператором begin без предложений восстановления или обеспечения, код выполняется один раз перед оценкой условия
i = 0
begin
  print "#{list [i]} "
  i += 1
end while i < list.size

# Однострочный синтаксис begin end while
a = 5
puts "#{a -= 1}" while a > 2 #=> 4 3 2

puts
# Цикл until с проверкой в конце
i = 0
begin
  print "#{list[i]} "
  i += 1
end until i == list.size

# Однострочный синтаксис begin end until
a = 5
puts "#{a += 1}" until a == 8 #=> 6 7 8


puts
puts '                                             Цикл loop(do)'

# Цикл loop аналогичен циклу while с условием true(Всегда бесконечный)
i = 10
loop do
  puts "hi"
  i -= 1
  break unless i <= 5 # прерывается только доп оператором
end


puts
puts '                                             Цикл for'

# цикл for не создает новую область для локальных переменных.

# Выполняет код один раз для каждого элемента в выражении.
# Выражение цикла for отделяется от кода зарезервированным словом do, новой строкой или точкой с запятой
# Цикл for удобен для работы с массивами, для перебора всех элементов массива
x, y = 0, 5
for per in x..y do # do писать не обязательно
  print per # Будет выводить каждое число диапазона пока они не кончатся
end


puts
# Цикл for…in почти точно эквивалентен следующему: '(expression).each do |variable[, variable...]| code end' за исключением того, что цикл for не создает новую область для локальных переменных.
# Пример цикла for для массива
nameS = ["Bob", "Kevin", "Alex", "George"]
for name in nameS # Будет выбирать в диапазоне массива nameS
  name += "!" # В цикле удобно добавлять каждому элементу что-то, чтоб не прописывать для каждго отдельно
  puts name # выведет каждый элемент массива
end
print nameS # выведет без добавленных знаков ! тк сам массив не был изменен циклом а только использован


puts
# Пример цикла for изменяющего массив
for i in 0..nameS.length() - 1 # Диапазон от 0 до коллич элементов массива -1(индексы начинаются от 0 соотв последний -1 от колич)
  nameS[i] += "!" # Теперь к значению под индексом заданным переменной el добавится !
end
print nameS # Теперь можно выводить весь цикл с заданным изменением !

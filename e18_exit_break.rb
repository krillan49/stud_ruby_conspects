puts '                                  Операторы exit, break, next, redo, retry(?)'

# ОШИБКА retry

puts
puts '                                           Оператор exit'

# Оператор exit завершает работу всей прграммы, начиная с того места в коде в котором он поставлен.
# Можно помещать в условные операторы, чтоб завершать программу только при выполнении заданных условий.
print "Сколько гостей к вам придет?: "
n = gets.to_i
if n < 0
	puts "Ошибка - введено отрицательное колличество гостей"
  exit # С этой строки программа завершит работу если условие блока выполняется.
end
puts "Придет #{n} гостей" # Этот код тоже исполняться не будет


puts
puts '                                           Оператор break'

# Оператор break(прервать) завершает работу только того блока цикла в котором он записан, начиная со строки написания
# Завершает метод со связанным блоком, если он вызывается внутри блока (метод возвращает nil)

# С операторами times, upto, downto
1.upto(3) do |x|
  puts "норма #{x}"  # выведет только одно значение завершив работу цикла => норма 1
  break
  puts "more #{x+1}"
end
puts 'aaa' # Дальше программа будет исполняться

# С операторами while, for, loop
n = 0
while n < 5
  puts n # выведет только одно значение завершив работу цикла => 0
  break
  puts n+1
  n += 1
end
puts 'aaa' # Дальше программа будет исполняться

for per in 1..9
  print per # выведет только одно значение завершив работу цикла => 1
  break
  print per + 1
end
puts 'aaa' # Дальше программа будет исполняться

# Завершает работу именно блока цикла
loop do
	n = rand(0..5)
	if n == 5
		break
	end
	puts n
end
puts 'aaa' # Дальше программа будет исполняться


puts
puts '                                               Оператор next'

# Переходит к следующей итерации самого внутреннего цикла. Прекращает выполнение блока, если вызывается внутри блока (с yield или call, возвращающим nil).
for i in 0..5
  if i < 2
    next # когда цикл проходят числа меньше 2х нижестоящий код цикла для них не работает
  end
  print "is-#{i}, "
end
#=> is-2, is-3, is-4, is-5,


puts
puts '                                               Оператор redo(повторение)'

# Перезапускает эту итерацию самого внутреннего цикла без проверки состояния цикла. Перезапускает yield или call , если вызывается внутри блока
for i in 0..5
	if i < 2 then
		puts "Value of local variable is #{i}"
		redo
	end
end
# Это даст следующий результат и войдет в бесконечный цикл —
#=> Value of local variable is 0
#=> Value of local variable is 0
#=> ...

# Пример:
for i in 0..5
	if i < 2
		print "is #{i}, "
    n=i if !n
    n+=1
		redo if n<5
	end
end
#=> is 0, is 0, is 0, is 0, is 0, is 1,


puts
puts '                                         Оператор retry(повторная попытка)'

# Если повторная попытка появляется в предложении спасения выражения начала, перезапустите с начала тела начала
begin
  do_something # exception raised
rescue
  # handles error
  retry  # restart from beginning
end


puts
#(ОШИБКА Invalid retry (SyntaxError))
# Если в итераторе появляется повтор, блок или тело выражения for перезапускает вызов итератора. Аргументы итератора оцениваются повторно.
for i in 0..5
	retry if i > 2
	puts "Value of local variable is #{i}"
end
# Это даст следующий результат и войдет в бесконечный цикл —
#=> Value of local variable is 1
#=> Value of local variable is 2
#=> Value of local variable is 1
#=> Value of local variable is 2
#=> ...

puts '                             File I/O - Получение данных от пользователя'

# gets - get string(вводимые данные по умолчанию относятся к классу String). Оператор функции gets считывает строку из стандартного потока(принимает из стандартного устройства) ввода (STDIN) и помещает ее в массив указанный аргументом s. Присваивает значение переменной через ввод через консоль.
puts ("Введите свое имя: ")
name = gets() # Передача gets в переменную
puts name

# gets = enter #=> "" (Если ввести в числовой ввод просто энтер без символов то возвращает пустую строку)

gets # Можно использовать гетс и без предачи ее в переменную, например для подтверждения исполнения дальнейшего кода(тк gets до нажатия паузит дальнейшее исполнение программы)


puts
# Оператор gets получает не только символы введенные с клавиатуры, но и информацию о нажатии enter. Соответственно в переменную присваивается не только введеный текст но и спецсимвол \n. Для того, чтоб переход на новую строку не осуществлялся существует функция chomp (удаляет только перенос)
print "Введите свое имя: "
name2 = gets.chomp
puts "Ваше имя: " + name2 + ", торчек" # Без chomp все что после переменной выведет на след строке

# strip вместо chomp можно ввести тогда, когда нужно удалить пробелы и спецсимволы в начале и конце строки
puts ("Введите свое имя: ")
namE = gets.strip # Вводим "     Вася   \n", но strip исправляет до "Вася"
puts ("Ваше имя: " + namE + ", торчек")


puts
# to_s, to_i, to_f, итд - это расширения объектов для преобразования типов данных:
puts ("Введите 1е число: ")
x = gets()
x.chomp! # Аналог x = x.chomp но короче (! - символ присвоения функции к переменной)
puts ("Введите 2е число: ")
y = gets().chomp()
puts (x + y) # При простом x+y числа складываются как строки 12+34=1234, gets по умолчанию воспринимает все как строки
puts (x.to_i + y.to_i) # При помощи .to_i к переменной так x.to_i + y.to_i или так chomp().to_i переводит тип данных строки в тд целые числа
puts (x.to_f + y.to_f) # При помощи .to_i 27.5+22=29 поэтому для чисел с плав точкой переводим в тд .to_f

# При помощи to_s переводим числа в строку, а иначе программа будет пытаться сложить строку и число и выдавать ошибку
puts ("Введите 1е число: ")
a = gets().chomp().to_i
puts ("Введите 2е число: ")
b = gets().to_i # Если добавляем to_i to_f то chomp уже не нужен
puts "Summ is: " + (a + b).to_s + " ok"

#ДОПОЛНЕНИЕ: gets.to_i = enter #=> 0 (Если ввести в числовой ввод просто энтер без символов то возвращает цифру 0)

puts
# Можно производить операции прямо в сторке с оператором gets
line = gets.to_i - 1
line2 = gets * 2


puts
puts '                                             STDIN.gets'

# http://ruby.qkspace.com/ruby-chem-gets-otlichaetsya-ot-stdin-gets

# Если написать в руби просто gets, то будет вызван метод Kernel#gets, а этот метод в руби устроен довольно интересно. Если при запуске программы был передан аргумент (который позже можно получить в программе из массива ARGV), то он воспримет его как путь к файлу и попытается этот файл прочитать, а у пользователя в консоли ничего не просит.

#$ ruby main.rb Привет
#Traceback (most recent call last):
#	2: from main.rb:1:in `<main>'
#	1: from main.rb:1:in `gets'
#main.rb:1:in `gets': No such file or directory @ rb_sysopen - Привет (Errno::ENOENT)

# Чтобы этого избежать, можно обратиться к методу gets объекта STDIN.


# STDIN — сокращение от STandarD INput — в данном случае консоль. Если вызвать метод STDIN.gets, то руби вызовет этот метод у объекта стандартного ввода и будет совершенно точно читать именно из консоли, не отвлекаясь на ARGV.

input = STDIN.gets.chomp

# Правило буравчика: если ваша программа использует ARGV, вместо gets необходимо использовать STDIN.gets, если не использует — можно оставить gets, но если везде замените на STDIN.gets хуже не будет.


puts
puts '                                           Гем io/console'

# Этот гем встроен в руби по умолчанию

require 'io/console' # подключение гема

# Библиотека io/console содержит метод noecho который позволяет делать ввод символов без их отображения во время ввода(например для введения пароля)
password = STDIN.noecho(&:gets).chomp












#

puts '                                              Range(Диапазоны)'

# Диапазоны встречаются везде: с января по декабрь, от 0 до 9, строки с 50 по 67 и так далее. Ruby поддерживает диапазоны и позволяет нам использовать диапазоны различными способами — Диапазоны как последовательности; Диапазоны как условия; Диапазоны как интервалы

# Диапазон(например 1..5) это один элемент(объект) а не 2 или больше
# Последовательность 1..100 хранится как объект Range , содержащий ссылки на два объекта Fixnum.

# Диапазон(Range) — за него отвечает класс Range и в нём хранится непрерывная последовательность целых чисел:
d1 = 1..5   #=> 1, 2, 3, 4, 5    # Две точки — от 1 до 5 включительно.
d2 = 1...5  #=> 1, 2, 3, 4       # Три точки — от 1 до 4, а 5 уже не входит в этот диапазон.

# Открытый диапазон
d6 = (25..) # аналог >= 25. Обязательно в скобках

# Диапазоны символов
d3 = "a".."c"     #=> a, b, c
d4 = "aa"..."bb"  # Интерпритирует комбинации символов как цифры числа в системе исчисления заданной числом символов
d5 = "cde".."fff"


# Создание объекта диапазона требует 2 элемента
r1 = Range.new(0, 2)     #=> 0..1
r1.to_a                  #=> [0, 1, 2]
r2 = Range.new(0, 1, 2)  #=> 0...1
r2.to_a                  #=> [0]
r3 = Range.new(2, 1)     #=> 2..1
r3.to_a                  #=> []
arr = [1, 7]
Range.new(*arr).to_a  #=> [1, 2, 3, 4, 5, 6, 7]


# Проверка попадает ли какое-либо значение в диапазон с помощью === (оператора равенства регистров).
(1..10) === 5 #=> true
('a'..'j') === 'z' #=> false


puts
puts '                                              Methods'

(1..100).max  #=> 100
(1..100).last #=> 100
(100..1).max  #=> nil
(100..1).last #=> 1

# Если вам нужно, вы можете преобразовать диапазон в массив, используя метод to_a
range1 = (1..10).to_a        #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
range2 = ('bar'..'bat').to_a #=> ["bar", "bas", "bat"]

(0..6).include?(5) #=> true  Включает ли диапазон элемент заданный параметром

# Метод “each” для типа Range:
(1001..1005).each{|x| puts "Я робот #{x}"}
("10aa".."20bb").each{|x| print "#{x} "}

# Шаг
(2..10).step(2).to_a #=> [2, 4, 6, 8, 10]

# Поиск находит ближайшее слева направо
(num+1..1_000_000).find{|el| el.to_s.chars.uniq.size == 2}

# реверс диапазона
(1..7).reverse_each.to_a #=> [7, 6, 5, 4, 3, 2, 1]


puts
puts '                                              Метод inject/reduce'

# inject (применим к диапазонам и массивам)  Возвращает объект, сформированный из операндов с помощью метода, заданного символом.
(1..4).inject(:+)     # => 10 (1 + 2 + 3 + 4)       # Sum, without initial_operand.
(1..4).inject(10, :+) # => 20 (10 + 1 + 2 + 3 + 4)  # Sum, with initial_operand.

(1..4).inject{|sum, n| sum + n*n }    # => 30 (1*1 + 2*2 + 3*3 + 4*4)      # Sum of squares, without initial_operand.
(1..4).inject(2){|sum, n| sum + n*n } # => 32 (2 + 1*1 + 2*2 + 3*3 + 4*4)  # Sum of squares, with initial_operand.

# Примеры с первым операндом (который является self.first) различных типов:
(1..4).inject(:+)                # => 10      # Integer.
[1.0, 2, 3, 4].inject(:+)        # => 10.0    # Float.
('a'..'d').inject(:+)            # => "abcd"  # Character.
[Complex(1, 2), 3, 4].inject(:+) # => (8+2i)  # Complex.

# Примеры с initial_operand различных типов:
(1..4).inject(2, :+)               # => 12                         # Integer.
(1..4).inject(2.0, :+)             # => 12.0                       # Float.
('a'..'d').inject('foo', :+)       # => "fooabcd"                  # String.
%w[a b c].inject(['x'], :push)     # => ["x", "a", "b", "c"]       # Array.
(1..4).inject(Complex(2, 2), :+)   # => (12+2i)                    # Complex.

# Примеры с различными методами операций:
(1..4).inject(:*)                # => 24           # Integer multiplication.
%w[foo bar baz].inject('', :+)   # => "foobarbaz"  # String array concatenation.

# reduce это алиас к inject
[100, 300, 2].reduce(:-) #=> -202


# Hash update.
hh = [{foo: 0, bar: 1}, {baz: 2}, {bat: 3}].inject(:update) # => {:foo=>0, :bar=>1, :baz=>2, :bat=>3}
# Hash conversion to nested arrays.
hh = {foo: 0, bar: 1}.inject([], :push) # => [[:foo, 0], [:bar, 1]]

puts '                                          Ruby веб-серверы'

# Ruby веб-серверы (Unicorn, Puma, Thin и Falcon) выполняют роль посредников между Ruby-приложением (обычно Rails или Sinatra) и веб-сервером (Nginx или Apache). Они принимают HTTP-запросы от веб-сервера, обрабатывают их в Ruby-приложении и отправляют обратно HTTP-ответы

# Краткое сравнение:
# | Feature      | Unicorn     | Puma                     | Thin              | Falcon              |
# |--------------|-------------|--------------------------|-------------------|---------------------|
# | Архитектура  | Pre-forking | Multi-threaded/Clustered | Event-driven      | Asynchronous        |
# | I/O Bound    | Отлично     | Хорошо                   | Хорошо            | Отлично             |
# | CPU Bound    | Плохо       | Умеренно                 | Плохо             | Хорошо (если async) |
# | Memory Usage | Высокий     | Средний                  | Низкий            | Низкий              |
# | Простота     | Простой     | Средний                  | Средний           | Сложный             |
# | Ruby Version | Любая       | Любая                    | Любая             | >= 3                |

# Puma    - рекомендуется для большинства Rails-приложений, особенно тех, которые имеют умеренную нагрузку и не требуют экстремальной производительности. Puma обеспечивает баланс между производительностью, потреблением ресурсов и простотой настройки. Clustered режим Puma подходит для CPU-bound задач
# Unicorn - выбор для простых приложений с большим количеством операций ввода/вывода, где простота настройки и стабильность важнее, чем экономия ресурсов
# Falcon  - лучший выбор для приложений, написанных с использованием асинхронного подхода и работающих на Ruby 3+, где важна максимальная производительность при большом количестве операций ввода/вывода
# Thin    - выбор для приложений с большим количеством операций ввода/вывода и низким потреблением ресурсов, но требует понимания EventMachine




puts '                                               Puma'

# Архитектура: Multi-threaded (многопоточный) и может работать в режиме clustered (многопроцессном). В многопоточном режиме Puma создает один или несколько процессов (workers), каждый из которых может обрабатывать несколько запросов одновременно благодаря использованию потоков (threads). В clustered-режиме он запускает несколько процессов-worker'ов, каждый из которых может быть многопоточным

# Принцип работы: Веб-сервер (Nginx или Apache) перенаправляет запросы к Puma, а Puma распределяет их по потокам в worker-ах

# Преимущества:
# 1. Более эффективное использование ресурсов, чем Unicorn, особенно при большом количестве одновременных запросов.
# 2. Хорошо подходит для приложений с небольшим количеством CPU-bound задач и большим количеством операций ввода/вывода (I/O)
# 3. Может работать как в однопоточном, так и в многопоточном режимах, предоставляя гибкость в настройке.

# Недостатки:
# 1. Потоки в Ruby подвержены влиянию Global Interpreter Lock (GIL), который ограничивает параллельное выполнение кода, написанного на C. Это может снизить производительность в CPU-bound приложениях. Clustered режим решает эту проблему, но потребляет больше памяти.
# 2. Требует более тщательной настройки, чем Unicorn.
# 3. Некоторые библиотеки могут быть не безопасны для работы в многопоточной среде.



puts '                                              Unicorn'

# Архитектура: Pre-forking (предварительное создание процессов). Unicorn создает несколько копий вашего Ruby-приложения в виде отдельных процессов при запуске. Каждый процесс обрабатывает один запрос одновременно.

# Принцип работы: Веб-сервер (Nginx или Apache) перенаправляет запросы к Unicorn, а Unicorn распределяет их по своим дочерним процессам.

# Преимущества:
# 1. Простота в настройке и управлении.
# 2. Хорошо подходит для приложений с большим количеством операций ввода/вывода (I/O).
# 3. Изоляция процессов: если один процесс падает, это не влияет на другие процессы.

# Недостатки:
# 1. Каждый процесс занимает значительный объем памяти, тк содержит копию приложения.
# 2. Не очень эффективен для приложений с большим количеством CPU-bound задач, так как каждый процесс использует только одно ядро CPU.



puts '                                              Falcon'

# Архитектура: Asynchronous (асинхронный). Falcon разработан специально для асинхронной обработки запросов с использованием Fiber Scheduler API в Ruby 3.

# Принцип работы: Falcon использует Fiber Scheduler API для переключения между задачами (Fiber'ами) без блокировки основного потока

# Преимущества:
# 1. Очень высокая производительность для I/O-bound приложений благодаря асинхронной архитектуре.
# 2. Низкое потребление ресурсов.
# 3. Использует современные возможности Ruby 3.

# Недостатки:
# 1. Требует Ruby 3 и выше.
# 2. Может потребовать переписыванияили адаптации некоторых частей приложения для полной асинхронности.
# 3. Менее зрелый, чем другие серверы, но активно развивается.



puts '                                               Thin'

# Архитектура: Event-driven (событийно-ориентированный). Thin использует EventMachine для асинхронной обработки запросов.

# Принцип работы: Thin работает как один процесс и использует EventMachine для обработки нескольких запросов одновременно, не блокируя основной поток.

# Преимущества:
# 1. Низкое потребление памяти.
# 2. Хорошая производительность для приложений с большим количеством I/O.
# 3. Легкий и быстрый.

# Недостатки:
# 1. Не очень хорошо подходит для CPU-bound приложений.
# 2. EventMachine может быть сложным в отладке и понимании.
# 3. Менее популярен, соответственно, меньше сообщество и доступность поддержки.
















#

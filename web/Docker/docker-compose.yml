version: '3.1'

services:                                        # services - все образы/сервисы которые будут подключены
  db:                                            # db: и phpmyadmin: названия образов/сервисов, можно их переименовать как угодно
    image: mariadb:10.3                          # image: характеристика указывающая какой образ мы будем стягивать
    restart: always                              # restart: настройка перезапускающая образ если он остановлен изза ошбки (always - перезапускает, no - не перезапускает)
    environment:                                 # environment: различные настройки(переменные, значения) что понадобятся для работы с образом, например логин и пароль для входа
      MYSQL_ROOT_PASSWORD: notSecureChangeMe     # MYSQL_ROOT_PASSWORD: собственно настройка пароля(по умолчанию notSecureChangeMe можно/нужно изменить)

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:                                       # ports: характеристика указывающая порты, если они нужны
      - 8080:80
    environment:
      - PMA_ARBITRARY=1                          # Некая стандартная настройка по умолчанию для phpmyadmin

# -------------------------------------

version: '3.1'

services:
  php:
    build: ./php                            # указываем папку где находится наш докерфаил и команду build: для него(те этот сервис в отдельном докерфаиле)
    ports:
      - 8081:80                             # укажем другой порт локального сервера(8081 вместо 8080) чтобы не было конфликтов, теперь по этому локалхосту у нас пхп фаил

  db:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12345abc99-

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8080:80                            # а по этому графический интерфейс майскуэл
    environment:
      - PMA_ARBITRARY=1


# ------------------------------------- Docker Volumes/Тома докер ----------------------------------

version: '3'

services:
  django:                                               # сервис который у нас будет работать(и устанавливать) с питоном и джанга
    build: ./
    container_name: django                              # необязательная команда устанавливает название для контейнера
    comand: python manage.py runserver 0.0.0.0:8000     # дополнительная команда, тут для запуска локального сервера(в Джанга есть предустановленный мы его сразу будем запускать). manage.py - спец фаил к которому мы обращаемся через Питон и вызываем команду(тут runserver) 0.0.0.0 - локалхост
    volumes:                                            # указываем тома за счет которых мы сможем соединить папку с хостмашины(сервера) с указанной нами папкой(тут текущей)
      - .:/usr/src/app                                  # связываем текущую папку с папкой которая прописана в WORKDIR(рабочая директория с хост машины которая будет находиться в контейнере). без этой нстройки не создастся фаил manage.py и другие
    ports:
      - "8000:8000"
    depends_on:                                         # говорит о том что наш сервис (тут django) вступит в зависимость(можем через него обращаться) с другим нашим сервисом (тут pgdb)
      - pgdb

  pgdb:                                                 # сервис базы данных для контейнера(тут PostgreSQL)
    image:                                              # Тк для сервиса pgdb мы не делали докерфаил, то описываем все настройки тут(есть в докерхабе)
    environment:
      - POSTGRES_DB=postgres                            # переменная названия образа(название после знака равно)
      - POSTGRES_USER=postgres				                  # задаем логин
      - POSTGRES_PASSWORD=postgres                      # задаем пароль
    container_name: pgdb
    volumes:
      - pgdbdata:/var/lib/postgresql/data/              # папка создастся pgdbdata в рабочей папке проекта и соединяем ее с папкой на сервере по стандартному пути. Это прописывает что все значения будут храниться на хостмашине и будут связанны с нашей папкой pgdbdata.
volumes:                                                # чтобы все коррктно работало необходимо в самом конце добавить еще одну настройку - volumes указывающее на папку(тут pgdbdata)
  pgdbdata:                                             # тут мы задаем что эта папка будет существовать
# тоесть при помощи томов мы можем указваать папки нашего проекта связанные с папками на хостмашине и все данные будут сохранены и теперь после остановки проекта ничего не будет утеряно














#

puts '                                           deploy. Хостинг'

# deploy - развертывать (деплоить на хостинг)

# Выкладыванием проекта в продакшен занимается DevOps

# https://github.com/krdprog/prog-conspects/blob/master/hartl-rails.md  -  инструкция развёртывания на Heroku(?? Больше нет бесплатных тарифных планов)


puts
puts '                                  Хостинг Render. Деплой Rails + Sidekiq'

# https://www.youtube.com/watch?v=cghgC5LqWoE&list=PLWlFXymvoaJ_IY53-NQKwLCkR-KkZ_44-&index=31
# (!!! Перепройти еще раз после прохождения гема для Постгрэ !!!)

# https://dashboard.render.com/

# Render - хостинг, который предоставляет услугу PaaS (platform as a service). Позволяет быстро и легко развернуть своё приложение, ничего при этом не платя.

# ?? Карта все равно будет нужна. Лучше какой-то российский сервис из похожих. Как пример - Amvera Cloud

# ?? Как лучше заполнить бд?  -  Надо либо делать бэкап локально и его накатывать на сервере, либо писать скрипт в seeds.rb и там описывать заполнение - конечно, сами по себе данные не передадутся


# Сделаем деплой приложения Rails, настроив БД Postgres, добавив Redis, настроив обработку фоновых задач с Sidekiq и реализовав выполнение заданной на задаче на регулярной основе (по типу Cron):


# 1. Создание PostgreSQL БД
# NEW+ => PostgreSQL => Страница настроек
# Из настроек обязательно выбираем: имя, регион(лучше Франкфурт тк ближе) и тарифный план.
# Далее в панели Dashboard можно посмотреть информацию о созданной БД(создается какоето время)
# Internal Database URL - понадобится потом находится в панели Dashboard в инфе данной БД (это лучше никому не показывать)


# 2. Создание Redis БД (например для экшен кейбл турбостримов или сайдкик)
# NEW+ => Redis => Страница настроек
# Из настроек обязательно выбираем: имя, регион, а так же настройку Maxmemory Policy: просто для кэша подойдет и allkeys-lru(recommended for caches), а если юзаем задачи в очередях, сайдкик, турбостримы, экшенкэйбл то лучше noeviction(recommended for queues/persistence), тк не будет удалать старые задачи.
# В бесплатном тарифном плане всего 50 подключений, что очень мало, тк например экшенкэйбл тратит 1 подключение на 1 юзера
# Далее в панели Dashboard можно посмотреть информацию о созданной БД(создается какоето время)
# Internal Redis URL - понадобится потом находится в панели Dashboard в инфе данной БД (это лучше никому не показывать)


# 3a. Конфигурация нашего приложения:
# а. Gemfile - должен быть гем именно для Постгресс(как минимум в группе продакшен), а не Скюлайт3
gem 'pg', '~> 1.4.3'
# (!! Для виндоус) Gemfile.lock - удостоверимся что прописана и правильная платформа линукс
"PLATFORMS
  x64-mingw-ucrt
  x86_64-linux" # дописываем эту строку если ее нет, без нее на сервере гемы не встанут, тк на сервере Линукс
# б. config/database.yml - удостоверимся что в дефолтных настройка адаптера postgresql
'default: &default
  adapter: postgresql'
# а в настройках продакшена url(к БД) должен браться из переменной среды(ENV['DATABASE_URL']) которую мы зададим на хостинге
"production:
  <<: *default
  url: <%= ENV['DATABASE_URL'] %>"
# в. config/puma.rb - удостовериться, что есть/раскомментированы настройки:
workers ENV.fetch("WEB_CONCURRENCY") { 2 }
preload_app!
# г. config/envirnoments/production.rb - ищем строку:
config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present? # и добавляем в нее  || ENV['RENDER'].present?:
config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present? || ENV['RENDER'].present?

# 3b. bin/render-build.sh - создадим в приложении этот фаил который будет использоваться для билда на хостинге (код там). Там пропишем последовательность команд, которые нужно выполнить чтобы приложение было готово к запуску
# Далее откроем командную строку и выполним команду, чтобы установить правильные права доступа для этого фаила, чтоб его можно было выполнить:
# > chmod a+x bin/render-build.sh

# 3c. Создаем репозитарий(если его нет) с нашмим проектом на Гитхаб/Гитлаб, тк Рендер будет забирать проект из репозитармя(можно и открытый и закрытый)

# 3d. Собственно создаем новый вебсервис на Рендер
# NEW+ => Web Servise => Build and deploy from a Git repository => Next => Connect Repository => (инсталируем гитхаб или гилаб если еще не было) конектимся к нужному репозиторию => Страница настроек
# В настройках выбираем: название и регион; The runtime for your web service (среду выполения) - Ruby; ветку в репозитарии; Build Command - можно оставить то что было по умолчанию, но лучше используем наш шеловский фаил bin/render-build.sh те пропишем в поле команду ./bin/render-build.sh; Start Command - можно по умолчанию. Ну и тариф
# Так же в самом низу нужно будет добавить переменные среды:
# REDIS_URL - значение Internal Redis URL из нашей БД Redis
# DATABASE_URL - значение Internal Database URL из нашей БД Посгресс
# RAILS_MASTER_KEY - он генерируется при создании приложения, берем его из фаила config/master.key (тоже не нужно ни с кем делиться)
# Далее в панели Dashboard можно посмотреть информацию о созданном приложении
# В Меню данного веб сервиса есть:
# Адрес нашего сайта - сверху слева в шапке сайта под его названием
# Events - (в панели сбоку) будет инфа о деплое, если делаем пуши в репозитарий, то тут тоже об этом будет инфа
# Manual Deploy - (кнопка сверху) чтобы деплоить новые коммиты руками
# Logs - (в панели сбоку) - это как консоль, тоесть и процесс установки и инфа о запросах и работе сервера
# Enviroment - (в панели сбоку) - можем добавлять/удалять/изменять переменные среды
# Metrics - (в панели сбоку) - разная статка
# Settings - (в панели сбоку) - можно менять тарифный план, настраивать приложение, менять команду билда, а так же добавлять кастомные домены. А так же в самом низу кнопки выключения и удаления этого вебсервиса


# 4. (!! Не бывает бесплатным) Для фоновых хадач нам нужно будет создать бэкграунд воркер
# NEW+ => Background Worker => Аналогично веб сервису выбираем нужный репозитарий => Страница настроек
# Все настройки теже, только для Build Command можно просто вписать bundle install тк для фоновых задач особо ничего не нужно типа эссетов итд; а в Start Command если мы например используем сайдкик то так и можно вписать bundle exec sidekiq
# Так же в самом низу нужно будет добавить переменные среды
# REDIS_URL - значение Internal Redis URL из нашей БД Redis
# RAILS_MASTER_KEY - он генерируется при создании приложения, берем его из фаила config/master.key


# 5. Задачи типа Cron - это те задачи которые выполняются на регулярной основе например каждый день в определенное время. Можно было бы для них использовать NEW+=>Cron Job. Но это еще платить и если уже создали бэкграунд воркер с sidekiq то можно просто добавить специальный гем который это заменит и будет работать подтип Cron:
gem 'sidekiq-scheduler', '~> 4'
# config/sidekiq_cron_schedule.yml - создадим данный фаил для нашего гема (код там)
# config/initializers/sidekiq.rb - создадим фаил (код там)
# app/workers/clean_worker.rb - создадим наш воркер и директорию для него (код там)

# ?? (Из комментов) Cвой yarn у них автоматически 1.22.19, если я не ошибfюсь, в общем 1-й. Потому если юзать другой может быть конфликт















#

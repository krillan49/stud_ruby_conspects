puts '                                       Управление ассетами'

# Раньше просто создавался фаил ЖС и подключался через скрипт на html-странице (например в конце тега body)
'<script src="js/app.js"></script>'

# Но ЖС начал сильно развиваться, начали появляться разные сторонние решения, модули, фрэймворки и подгружать их стали через отдельные фаилы, тоесть отдельно библиотеки(например jquery), отдельно утилиты, отдельносвои фаилы итд
'<script src="js/app.js"></script>'
'<script src="js/jquery.js"></script>'

# Но когда этот столбец подключаемых скриптов стал огромным(например штук 15) это стало неудобно. К томуже нужно было контролировать версии всех подключаемых библиотек
# В итоге нужно было решение которое позволит всем этим управлять и придумали webpack(с Webpacker для Рэилс), Sprockets(только для Рэилс) и другие решения

# Ассеты - это таблицы стилей, js-скрипты, изображения

# Транспайлинг - конвертация ЭкмаСкрипт6 в обычный JS (нужно для старых браузеров) (все менее актуально)


puts
puts '                                            Sprockets(устарело)'

# Сейсас Sprockets устаревает и лучше переходить на чтото другое
# Удаление Sprockets из приложения Рэилс:   https://www.youtube.com/watch?v=Vqh4wHdNXg8   20-55

# Sprockets - решение для управления ассетами(таблицы стилей, js-скрипты, изображения) в Рэилс
# Стоял в Рэилс 6- версий по умолчанию, в 7й версии если нужен то надо подключить через гем:
gem "sprockets-rails"

# Структура Sprockets:
# Все наши ассеты(изображения, таблицы стилей, могут быть и js-скрипты) должны находиться в поддирректориях в директории assets

# Sprockets не очень заточено на модульный js;
# Устанавливать сторонние js-библиотеки с помощью него очень неудобно, тк приходится подключать сторонние гемы для фронтэнд в Gemfile, чтобы они подгодавливали ассеты таким образом чтоб их можно было подгрузить в директории assets. Некоторые гемы перестают поддерживаться итд
# Нужно было обрабатывать отдельно например: sass  - для этого нужен был сторонний гем sass-rails; coffee-script - сторонний гем coffee-rails, чтобы превращать его в js; autoprefixer-rails - гем для автопрефиксов js на Рэилс; отдельно надо было устанавливать сторонние модули js и делать их бандл и транспайл.


puts
puts '                                      Webpacker(устарело). Webpack'

# Webpacker устарел. В феврале 2022 года Webpacker более не поддерживается сообществом и работа над ним остановлена.

# https://www.youtube.com/watch?v=Vqh4wHdNXg8   - миграция с Sprockets на Webpacker

# webpack - инструмент, который позволяет компоновать(собирать вместе) ассеты(те JS, таблицы стилей, изображения) и правильным образом их подготавливать для развертывания в продакшене.
# https://webpack.js.org/

# https://github.com/rails/webpacker
# Webpacker - привязка(связующее звено для скомпилированного и пакетного JavaScript) которую создали для Рэилс, которая позволяет использовать в нашем Рэилс приложении webpack. Чтобы собирать JS-модули, делать их транспайлинг и бандл, чтобы наши модули на ECMAScript можно было запускать в любых браузерах(поддержка старых браузеров). Удобно что никаких прослоек для js-скрипта не нужно.
# Но приходилось все равно частично использовать Sprockets и например гем sass-rails, получалась мешанина, потом когда sass-rails устарел пришлось использовать сам webpacker и для работы с таблицами стилей.
# Тоесть webpacker это довольно сложное решение, одновременно делает и бандл и транспайл и прекомпиляцию css и еще и отдавать все эти ассеты клиентам. Сложные настройки, сложные мигнрации на другие версии, тоесть у новичка чтото постоянно будет ломаться


# Webpacker отделяет описание всех решений в package.json, вместо того чтобы их хранить в Gemfile
# Нужно следить чтобы Webpacker был одной версии и в Gemfile и в package.json
# После обновления вебпакера нужно выпонить и ярн инсталл


puts
puts '                                            Решения для Рэилс 7'

# В Рэилс 7 разработчик может сам решать какие решения из множества существующих и для каких ассетов применять.

# Для Рэилс есть специальные гемы, при помощи которых мы можем выбирать решения и для бандла css и для бандла js:

# 1. Бандлинг css  (необходим node.js c yarn)
# https://github.com/rails/cssbundling-rails
# Из коробки поддерживает решения: Tailwind CSS, Bootstrap, Bulma, PostCSS, Dart Sass
# > rails new myapp --css [tailwind|bootstrap|bulma|postcss|sass]
# Если при созданнии приложения не указать опцию --css с решением, тогда в приложении будет обычный css без препроцессоров и фрэймворков

# 2. Бандлинг js  (необходим node.js c yarn)
# https://github.com/rails/jsbundling-rails
# Из коробки поддерживает решения: Bun, esbuild, rollup.js, Webpack
# > ails new myapp -j [bun|esbuild|rollup|webpack]
# Если при созданнии приложения не указать опцию -j с решением, тогда в приложении будет использоваться новое решение по умолчанию importmap-rails


puts
puts '                                            importmap-rails'

# https://github.com/rails/importmap-rails

# importmap-rails - новое решение по умолчанию в Рэилс 7 для управления js-ассетами. С ним мы вообще не делаем ни транспайлинг ни бандлинг js-скрипта, а просто подключаем js-модуль написанный на ECMAScript и прямо так отдаем юзеру.

# Для importmap-rails не нужно устанавливать node.js

# Современные браузеры поддерживают ECMAScript, но какие-то еще не реализовали эту поддержку, тоесть для старых браузеров все равно нужен будет транспайлинг, а его в importmap-rails нет.
# Для использования sass все равно понадобится node.js или какието гемы
# Библиотеки устанавливаются необычно/неочевидно, а зависимости прописываются не в package.json а в специальном рубифаиле
# Нет удобного способа обновления компонентов (Возможно уже исправлено)


puts
puts '                                               ESBuild'

# https://esbuild.github.io/

# ESBuild - современное, относительно простое в использовании и быстрое решение

# Не использует транспайлинг ?? тк использкет экмаскрипт6 модули, тк все современные браузеры уже их поддерживают
















#

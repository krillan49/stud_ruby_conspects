puts '                                               Linux'

# Linux – это семейство Unix-подобных операционных систем.

# Unix – семейство многозадачных и многопользовательских операционных систем. Unix позволяет одновременно работать сразу с несколькими терминалами, разным людям, при этом каждый из них может выполнять свои действия, что будут использовать ресурсы одного общего ПК.

# Linux - это само ядро, при помощи которого собирают конкретные дистрибутивы(ubuntu, mint итд).

# Linux имеет полностью открытий исходный код, а это дает разработчику возможности создать все что-угодно на основе ядра Линукс.

# Дистрибутивы это полноценные оболочки(операционные системы), что были созданы на основе ядра Линукс. Большинство дистрибутивов бесплатные.

# https://itproger.com/news/kakoy-linux-distributiv-vibrat-top-7  - описание топ дистрибутивов

# https://ubuntu.com/download/desktop       - скачать образ(iso - который можно использовать для установки как на джелезо, например с сд-диска, так и с виртуальной маины) убунту с оф сайта(лучше качать стабильную LTS версию, а не последнюю)

# https://www.linuxmint.com/                - оф сайт Минта. Является самым популярным дистрибутивом. Отличается хорошей стабильностью и простотой работы. В качестве основы используется Ubuntu.
# Андроид также является дистрибутивом, что создан на основе ядра Линукс.

# Узнать на чем основан конкретный дистрибутив можно просто нагуглив карту всех дистрибутивов
# Минт на основе Убунту, а Убунту на основе Дебиан (DEB).


puts
puts '                                            Ubuntu установка'

# https://help.ubuntu.com/stable/ubuntu-help/index.html

# 1. Выбираем язык, далее нажимаем "Install Ubuntu/Установить Ubuntu"
# 2. Выберем язык раскладки клавиатуры
# 3. Выберем тип установки и дополнительные программы, если нужны
# 4. Тип установки(как поступить с жеским диском, можно очистить данные перед установкой или еще чтото, на виртуалке очистит диск виртуальной машины). Дадее в доп окне сообщит о разбиении на поддиски(портишены)
# 5. Выберем временную зону
# 6. Создадим администратора: Укажем наше имя, имя машины, имя пользователя, пароль входа и можно поставить галочку чтоб потом спрашивало пароль(123456). Лучше указывать все на латинице
# Далее запускается процесс установки


puts
puts '                                            Ubuntu клавиши'

# Горячие клавиши настроить     - например для смены языка можно настроить в "Настройки" -> "Комбинации клавиш" - "Переключиться на следующий источник ввода"

# Для вставки и копирования текста в том числе и в терминале можно использовать
# Ctrl + Shift + C              - копировать
# Ctrl + Shift + V              - вставить

# Return                        - аналог Enter(в виртуалке с винды собственно и используется Enter)

# Ctrl + Alt + T                - открыть терминал

# Ctrl + H                      - показать/скрыть скрытые фаилы

# win + пробел                  - для смены языка


puts
puts '                                            Ubuntu интерфейс'

# 1. В самом верху есть панель-бар в которов находятся слева-направо:
# Обзор - можем при помощи него искать нужные приложения
# Время и дата
# Переключение языка
# Панель звука, сети, настроек, выключения

# Настройки - в правом верхнем углу(панель выключения) там в меню и настройки
# Нужную настройку можно найти поиском(левый верхний угол в меню настроек)
# Пример находим "Настройка экранов" и справа в подпункте "Разрешение" можем поменять разрешение(например 1920x1080(16:9))
# Пример находим "Фон" и двойным нажатием по картинке можем изменить картинку главного экрана
# Пример находим "Внешний вид" можем менять визуал в целом


# 2. Боковая панель(слева), содержит иконки в данный момент открытых приложений и приложений, что находятся в быстром доступе, по умолчанию это:
# Браузер Фаерфокс
# Фаилы - программа для работы с папками в системе(Домашняя папка - корневая всего нашего компьютера)
# Ubuntu Software - приложение для установки других приложений
# Справка
# Корзина
# Показать приложения - (внизу) кнопка которая открывает меню со всеми приложениями установленными в системе и поиском по ним

# Чтобы добавить приложение в эту панель открываем его, нажимаем правой кнопкой и выбираем "Добавить в избранное"

# Ubuntu Software - (по умолчанию вынесен в боковую панель) встроенный магазин с графическим приложением для системы Ubuntu. Большинство крупных программ можно скачать при помощи этого приложения, просто выбрав и нажав установить. Программы проходят отбор и безопасны(?). Но он может не всегда содержать искомую программу, альтернатива менеджер apt-get и утилита dpkg


puts
puts '                                              Ubuntu Gnome'

# https://help.ubuntu.com/stable/ubuntu-help/index.html

# Gnome — это бесплатная и полностью свободная среда рабочего стола для операционных систем на основе UNIX.

# gnome-look.org   - сайт где можно скачать темы, тоесть весь внешний вид системы (как их установить описано в их документации там же)  https://www.youtube.com/watch?v=Nn5jaVjRUgY   (12-20+)

# Ubuntu по умолчанию поставляется с окружением рабочего стола Gnome. Но можно установить и другие

# GTK это набор библиотек для отрисовки графического интерфейса, он написан на Си и используется в окружениях рабочего стола для Linux, напримсер в Gnome, Xfce, Cinnamon, Mate. Но Kde plasma уже используется QT. Который как по получше и современнее. Плюс он поддерживает ещё и Android.

# Проверить версию библиотеки GTK в терминале:
# ~S dpkg -s libgtk-3-0|grep '^Version'
# dpkg          -    обращаемся к програмному обеспечению
# libgtk-3-0    -    библиотека GTK версии 3-0


puts
puts '                                      Терминал и основные команды'

# Название символов:
# ~ - тильда
# ^ - карет
# & - и
# | - или
# \ - бэкслэш
# / - слэш

# Ctrl + Alt + T   - открыть терминал, так же можно зайти через меню приложений или обзор на верхней панели

# В терминале вместо полного введения названия команды, файла или папки можно ввести начальные символы и нажать tab, а терминал дополнит остальную часть названия или предложит альтернативы, если вариантов больше одного

# При помощи команд терминала(командной строки) Linux можно выполнять людые действия в операционной системе.
# Eсть некоторые дистрибутивы, что вовсе не содержат графический интерфейс
# Ctrl + Alt + F1  - любой дистрибутив можно переключить в консольный режим отключив графическую оболочку

# Папка /home/ это можно так сказать userspace, пользовательское пространство. Для личных файлов, фотографий итд. А корневая папка(доступная только суперюзеру), она и является корнем и обозначается она как "/"

# .            - текущая директория (иногда может пригодиться)
# ./some       - папка some в текущей директории тоже что и просто some
# ~            - (тильда) домашняя директория, аналог /home/username
# ~$           - слева от "$" пишется текущая директория (тут домашния директория)
# ~/Загрузки$  - тоесть текущая директория это /home/username/Загрузки  (Не обязательно писать "Загрузки" на русском. Можно и "Downloads")

# При введении в термил имен фаилов или директорий состоящих из нескольких слов разделенных обычным пробелом, нужно взять это название в одинарные кавычки
# $ cd ~/'Рабочий стол'       - переходим в директорию Рабочий стол


# В терминале можно запускать любые установленные приложения просто указав их названия
# $ vim              - запустим текстовый редактор vim (выход из vim  :qa и нажать энтер)
# $ firefox          - запустить браузер firefox


# $ exit      - закрыть терминал или вернуться в состояние предыдущего пользователя который был сменен через "su"
# $ clear     - очистить терминал от записей


# 1. pwd - выводит текущую рабочую директорию. PWD расшифровывается как «print working directory».
# ~$ pwd    #=> /home/username


# 2. cd - выполняет переход между папками(директориями) после нее пишем полный или относительный путь.
# $ cd fname                   - перейти в папку что находится в текущей директории (относиельноый путь)
# $ cd ~                       - перейти в домашнюю директорию
# $ cd                         - перейти в домашнюю директорию
# $ cd ~/Загрузки/ваша_папка   - перейти по полному пути
# $ cd Загрузки/ваша_папка     - перейти по относительному пути
# $ cd ..                      - перейти на директорию вверх
# $ cd ../Загрузки/ваша_папка  - перейти на директорию вверх и по относительному пути


# 3. ls - просмотреть содержимое какой либо директории
# $ ls                  - просмотреть содержимое текущей директории
# $ ls /home/username   - просмотреть содержимого в папке /home/username
# $ l                   - посмотреть содержимое директории с обозначением папок как name/


# К каждой команде есть дополнительные опции (флаги). Они добавляют дополнительное действие при выполнении команды. Чтобы просмотреть все возможные опции для определенной команды пропишите после неё «--help».
# $ ls --help            - посмотреть все дополнительные опции к команде ls
# $ ls -l                - отображение подробной информации относительно файлов и папок (права доступа, кто создал, вес)
# $ ls -r                - выведет в обратном порядке (по умолчанию алфавитный)
# $ ls -p                - выведет в вормате name/  (аналог команды l)
# $ ls -p -r             - можно указывать несколько флагов


# 4. tree - команда показывает все фаилы, папки как в данной директории, так и во всх поддиректориях в виде дерева, а так же пишет общее число директорий и фаилов. Изначально не установлена так что нужно установить
# $ sudo apt install tree              - установка команды tree
# $ tree                               - посмотреть дерево от текущей директории
# $ tree www                           - посмотреть дерево от директории www по относительному пути


puts
puts '                                 Терминал: работа с фаилами и директориями'

# 0. cat - команда выводит содержимое фаила в консоль
# $ cat some/file.txt                             - выведет в консоль содержимое фаила some/file.txt


# 1. touch - команда позволяет создать один или несколько файлов(не может создавать папки) в определенной директории.
# $ touch index.html                              - Будет создан один файл в текущей директории
# $ touch www/index.html                          - Будет создан один файл в папке www
# $ touch www/index.html www/css/style.css        - Будет создано два файла в папке www и в www/css


# 2. nano - команда позволяет открыть фаил для редактирования при помощи текстового редактора nano, но если фаил не существует, то он будет создан и открыт. В окне редактирования можно изменять фаил, снизу прописаны дополнительные команды, где символ "^" обозначет ctrl
# $ nano                                 - создать и открыть новый фаил в текстовом редакторе nano
# $ nano index.html                      - будет открыт файл index.html
# $ nano www/index.html                  - будет открыт файл index.html из папки www

# В Linux в зависимости от версии могут присутствовать(так и нет) разные встроенные текстовые редакторы. Наиболее популярными являются: nano, vim(нужно установить), gedit(редактор для графической оболочки, как стандартный блокнот на винде, открывает фаили при 2йном нажатии именно он), pico(почти копия nano).


# 3. mkdir - позволяет создать папку в определенной директории, можно создать как одну, так и несколько папок одновременно. Но нельзя создать сразу и папку и папку внутри нее
# $ mkdir www                            - будет создана папка www в текущей директории
# $ mkdir www/css user                   - будут созданы две папки(одна в уже существующей папке www)


# 4. cp - используется для копирования файла. При копировании можно указать новое имя и новую папку для файла.
# $ cp file.txt file2.txt                 - копирование file.txt и изменение его имени на file2.txt
# $ cp file.txt www                       - копирование file.txt из текущей директории в www/
# $ cp file.txt www/file2.txt             - копирование file.txt из текущей директории в www/ и изменение его имени на file2.txt
# $ cp ~/some/file.txt www/file2.txt      - копирование file.txt из директории ~/some/
# $ cp ~/some/file.txt .                  - копирование file.txt из директории ~/some/ в текущую директорию


# 5. mv - позволяет переместить(вырезать и вставить) файл из одной папки в другую.
# $ mv test/file.txt some                 - перемещение файла file.txt из папки test в папку some
# $ mv file.txt ..                        - перемещение файла на уровень выше(тут выше от текущего уровня рабочей директории)
# $ mv www/file.txt www/..                - перемещение фаила из папки www в текущую папку


# 6. rm - команда удаляет один или несколько файлов.
# $ rm test/some/file.txt                 - удаление файла file.txt из директории test/some/
# $ rm file.txt some.html                 - удаление файлов file.txt и some.html
# $ rm test/*                             - удалить все фаилы из директории test/
# $ rm test/*.txt                         - удалить все фаилы с расширением .txt из директории test/
# $ rm test/text.*                        - удалить все фаилы с названием text. из директории test/
# $ rm file_*.txt                         - удаление всех файлов, что начинаются на file_ и заканчиваются .txt

# Для удаления папок нужно дописать опцию -rf
# -r - ключ используется для того, чтобы выполнять рекурсивный обход всех директорий.
# -f - (force) ключ - не запрашивать никаких подтверждений.
# $ rm -rf test/dir                       - удаление папки dir из папки test/


puts
puts '                                         Супер пользователь'

# Администратор в Linux называется супер пользователь(super user).

# Некоторые действия могут быть выполнены от имени администратора. Для выполнения действий от имени администратора перед командой нужно прописать ключевое слово sudo (super user do)

# При создании фаилов или папок от имени администратора(попросит пароль после нажатия Enter при первом обращении к sudo после открытия терминала), они будут иметь закрытые права доступа и пометку на значке фаила. Это означает, что их редактирование и удаление может быть выполнено только супер пользователем.

# $ sudo touch file.txt                   - создание фаила с правами администратора
# $ sudo nano file.txt                    - теперь для редактирования(или удаления) этого фаила тоже надо использовать sudo
# $ sudo !!                               - выполнить предыдущую команду (тут nano file.txt)

# Можно перейти в режим администратора при помощи команды смены пользователя, чтобы не писать перед каждой командой sudo
# $ sudo su                      - переход в режим администратора
# Теперь в пути у нас прописывается /root перед именем компьютера:
# krillan@krillan-itp-ubuntu:~/Документы$                        - было (обычный юзер)
# root@krillan-itp-ubuntu:/home/krillan/Документы#               - стало (суперюзер)
# # exit                         - возврат от суперпользователя к предыдущему пользователю
# # su krillan                   - (небезопасно) переход из режима администратора в режим пользователя

# возвращаться от root к обычному непривилегированному пользователю через `su username` - небезопасная практика. Возвращаться из суперпользовательской оболочки надо командой exit. Тогда попадёшь в исходную оболочку, а не запустишь новую внутри старой. Иначе получится, что можно будет из обычного пользователя попасть в root тоже командой exit без пароля. И это будет видно другим пользователям на тачке по запущенным процессам.
# root@krillan-itp-ubuntu:/home/krillan/Документы# exit
#=>
# krillan@krillan-itp-ubuntu:~/Документы$


puts
puts '                                Права доступа. Смена прав и влапдельца фаила'

# Права доступа к фаилу или папке обозначаются 3мя цифрами (например 765), где:
# 1я цифра - (тут 7) права доступа для owner/владельца фаила (того кто его создал) (u)
# 2я цифра - (тут 6) права доступа для group/группы                                (g)
# 3я цифра - (тут 5) права доступа для всех остальных пользователей                (o)
# Значения каждой из 3х цифр может быть от 0 до 7

# Каждая цифра в параметрах доступа означет 3-значное двоичное число:
# 000 = 0, 001 = 1, 010 = 2, 011 = 3, 100 = 4, 101 = 5, 110 = 6, 111 = 7.
# где цифры 2ичного числа обозначают "rwx" (1я цифра - "r", 2я - "w", 3я - "x"), те r - четверки, w - двойки, x - единицы
# r - (read) возможность прочитать/открыть фаил (для папки это )
# w - (write) возможность записать/изменить в фаил
# x - (exequte) возможность запустить/исполнить фаил (для папки это открыть/войти в папку)
# Каждое из этих свойств может быть включено или отключено - всего комбинаций 8(2**3)
# 1 в соотв положении значит включен режим, 0 - выключен.

# 765 == (111 110 101) == (rwx rw- r-x) Тоесть владелец имеет полный доступ, группа не может исполнять, а остальные записать

# Права доступа и владельца фаилов можно посмотреть в терминале при помощи команды:
# $ ls -l
# =>
# -rw-r--r-- 1 root    root       5 [дата и время] file.txt
# -rw-r--r-- 1 root    root       8 [дата и время] file2.txt
# -rw-rw-r-- 1 krillan krillan   10 [дата и время] test.txt
# drwxrwxr-x 2 krillan krillan 4096 [дата и время] test
# drwxr-xr-x 2 root    root    4096 [дата и время] doc
# Где 1й символ(- или d) это обозначение фаила или папки соответсвенно, далее права доступа для всех 3х типов(rw- r-- r--), далее хз что за цифра, дплее владелец(root) и группа(root), далее вес фаила в байтах, дата и его название
# root - обозначает что папка или фаил созданы с правами суперпользователя


# 1. chown (change ownership) - команда для изменения владельца и группы фаила(владелец:группа). Если меняем фаил с владельцем root или на владельца root то нужно выполнять команду от имени суперпользователя (sudo)

# $ sudo chown root:krillan file.txt         - теперь у фаила file.txt владелец будет root, а группа krillan
# $ ls -l          #=>
# -rw-r--r-- 1 root krillan 5 [дата и время] file.txt

# Чтобы сменить пользователя или группу папки нужно использовать допонительный флаг "-R"
# $ sudo chown -R krillan:krillan doc        - теперь у папки и владелец и группа krillan
# $ ls -l          #=>
# drwxr-xr-x 2 krillan krillan 4096 [дата и время] doc

# chgrp - команда меняет только группу для файла


# 2. chmod (change modification) - команда, чтобы менять права доступа к фаилу или папке, указывается в цифрах. Если права у фаила с владельцем root или на владельца root то нужно выполнять команду от имени суперпользователя (sudo)

# $ sudo chmod 664 file.txt                  - меняем права доступа на 664 фаилу file.txt
# $ ls -l          #=>
# -rw-rw-r-- 1 root krillan 5 [дата и время] file.txt
# Теперь пользователи из группы krillan могут редактировать фаил без прав суперпользователя

# Чтобы сменить права доступа папки нужно использовать допонительный флаг "-R"
# $ chmod -R 764 doc
# $ ls -l          #=>
# drwxrw-r-- 2 krillan krillan 4096 [дата и время] doc


puts
puts '                                    Пакетный менеджер Линукс(Ubuntu)'

# Linux содержит встроенный пакетный менеджер. С его помощью можно скачивать из репозитория, устанавливать, обновлять и удалять приложения. В зависимости от дистрибутива пакетный менеджер может отличаться, но принцип его работы будет неизменным.

# Работает именно с программами из репозиториев

# В дистрибутиве Ubuntu менеджером выступает «apt-get».

# $ apt-get - говорит о том что мы обращаемся к пакетному менеджеру

# Если мы хотим чтото установить, обновить или удалить, то нужно это делать от имени администратора

# 1. apt-get install - команда для установки приложений.
# $ sudo apt-get install vim             - установим текстовый редактор вим (есть в стандартном репозитории)
# $ vim                                  - проверим (выход из vim  :qa и нажать энтер)

# 2. apt-get remove - команда для удаления приложений. Удаляет программу и все файлы, что связаны с ней.
# $ sudo apt-get remove vim              - удалим vim

# 3. apt-get upgrade - команда для обновления всех приложений(пакетов) взятых из любых репозиториев
# $ sudo apt-get upgrade                 - обновит все установленные в системе приложения

# 4. apt-cache policy - команда которая ищет пакет(приложкение) на вашем ПК
# $ apt-cache policy vim         - выдаст инфу о приложении есть ли на компе и если нет инфу где можно скачать и предпочтит версию

# Существует один общий стандартный репозиторий, а так же множество дополнительных репозиториев(к ним нужно подключиться отдельными командами, которые есть обычно в подборках приложений)
# Названия приложений можно найти в различных подборках и на специальных сайтах, которые можно загуглить, например "100 лучших репозиториев"
# https://linuxhint.com/100_best_ubuntu_apps/            -  Подборка популярных Ubuntu приложений

# (только стандартный или все репозитории ??)все программы проходят отбор, прежде чем попасть в репозиторий, так что они безопасны

# 5. apt-cache search - команда которая ищет пакет(приложкение) в стандартном репозитории. Может искать по неполному названию и предлагать варианты в зависимости соотв введенных символов.
# $ apt-cache search bluefi      - выдаст список программ в названии которых есть "bluefi"

# 6. Пример с подключением к дополнительному репозиторию и установке текстового редактора Атом
# $ sudo add-apt-repository ppa:webupd8team/atom
# $ sudo apt-get update
# $ sudo apt-get install atom


puts
puts '                        Команды поиска, сортировки и записи: find, grep, sort, >'

# 1. find - команда выполняет поиск файлов и папок по их названию, типу, размеру итд и выводит их названия в консоль. Команда ищет и в указанной дирректории и во всех вложенных в указанную директориях
# $ find [путь где ищем] далее флаги типа поиска и их параметры:
# -type  - 1й флаг после которого мы указываем что ищем, "d" - папку или "f" - фаил  -type [d/f]
# -name  - флаг для поиска по названию папки или фаила, после него в кавычках стандатный аргумент поиска "*.txt"
# -iname - по названию папки или фаила без учета регистра "*.TXT"
# -perm  - по коду доступа, далее нужно указать код (? добавив 0, хз зачем и без него работает) например 0764
# -size  - по размеру фаила, перед числом размера можно указать +(больше чем) или -(меньше чем), а после единицу измерения, например k(килобайт, именно строчная) или M(мегабайт, именно заглавная) -size [+/-][число][k/M]
# -not [-name/-iname/-perm/-size] [значение поиска] - флаг ищет фаилы противоположные критерию поиска флага после него

# $ find . -type f -name "fi*.txt"            - находит все фаилы с расширением "txt" и начинающиеся на "fi" в текущей директории
# $ find ~/Загрузки -type d -iname "*n*"      - находит все папки в директории "~/Загрузки", что содержат букву "n" в названии
# $ find -type f -perm 664                    - находит в текущей директории все фаилы с доступом 664
# $ find -type f -size +1M                    - находит фаилы больше 1 мегабайта
# $ find www -type f -size -10k               - находит в папке www фаилы меньше 10 килобайт
# $ find -type f -not -name "*.txt"           - находит все фаилы с расширением НЕ "txt"
# $ find ~/Документы -type f -perm 0664 -iname "*.txt" -size -100k       - поиск по множеству флагов
# $ find . -type f -not -perm 0664 -not -iname "*.txt" -size -100k       - поиск по множеству флагов с -not


# 2. grep - команда для поиска информации внутри файлов, отображает строки, где было найдено совпадение. Искомый текст выведет выделенным красным, при поиске в нескольких фаилах выведет названия фаилов перед найденным в них текстом
# $ grep [доп флаги] ["текст для поиска"] [путь с именем фаила в котором ищем]
# -n  - флаг выведет номера строк в которых найдено совпадение
# -i  - флаг делает поиск нечувствительным к регистру

# $ grep "text" some/main.txt            - находит все слова "text" в файле some/main.txt
# $ grep text some/main.txt              - можно задавать значение без кавычек
# $ grep "text" some/main.txt test.txt   - находит все слова "text" в файлах some/main.txt и test.txt
# $ grep -n -i main* main.cpp            - находит слово "main" в файле main.cpp. Выводит номер строки и не учитывает регистр

# (?? почемуто не работает со звездочками до букв "*main" и ищет только если звездочки после main* ??)


# 1+2. find + grep. Обрамляем grep в -exec ... {} +, сделав его дополнительной командой
# -exec  - флаг говорит о том что после одной команды выполним другую (потом проверить с другими командами)
# {}     - обозначают в какое место подставляется вывод команды find (с именем файла), что позволяет нам дать аргумент для команды grep, теперь она знает в каких фаилах искать
# +      - grep будет выполнен сразу ко всем файлам, которые найдет find, а не к каждому по очереди. То есть + слепит все найденные адреса файлов в одну строку фактически

# $ find ~ -type f -iname "*.txt" -exec grep -n -i "*ma*" {} +       - поиск файлов и нахождение в них слова

# В каких то программах нет ключа -exec, они просто выплёвывают всё в строку.
# С I/O (потоками ввода/вывода) выполнить цепочку команд проще. Передаем результат, как аргумент с помощью синтаксиса "команда которая выдает что-то в терминал" | "команда, которой в качестве аргументов передаётся результат предыдущей команды"

# $ ls | grep t               - выведет все имена фаилов в которых есть буква "t"(? нужно именно без кавычек, тк ищем в выводе консоли), тоесть ищет именно в выводе консоли, а не внутри фаилов как обычно


# 3. sort - команда сортировки данных(? строк разделенных \n) в фаиле. Сортирует фаилы только для вывода в консоль, не меняя сам фаил. По умолчанию сортирует в алфавитном порядке
# $ sort names.txt                                 - сортировка в алфавитном порядке
# $ sort -n nums.txt                               - сортировка в числовом порядке
# $ sort -n nums.txt > nums_ord.txt                - сортировка и запись результатов в другой фаил(который создастся)


puts
puts '                              Команды диспетчеров задач, просмотра памяти'

# $ top             - чемто похоже на диспетчер задач из Windows но только в терминале. Показывает какие процессы запущены от какого пользователя и сколько ресурсов на какие процессы тратится. Чтобы выйти из программы нужно нажать "q"

# $ free            - показывает сколько памяти доступно и сколько занято в байтах
# $ free -h         - показывает сколько памяти доступно, переводит байты в мегабайты или гигабайты для удобочитаемости

# $ ps                        - посмотреть запущенные данным пользователем программы (только запущенные вручную)
# $ ps -aux                   - посмотреть запущенные всеми пользователями программы (в том числе запущенные системой)
# $ ps -aux | grep a          - посмотреть все строки вывода где есть буква a (буква выделится красным)


puts
puts '                                     Архивация, сжатие файлов'

# 1. tar - команда (архиватор) выполняет архивацию фаилов, создает папку(??) с расширением .tar. Не сжимает файлы, а лишь создает архив, тоесть вес не уменьшится. Формат .tar не совместим с Windows(? и Мак).

# Опции/флаги:
# cf  - (create folder) опция которая говорит что создаем папку архива
# tf  - (test folder) опция для тестирования, тоесть просмотра какие папки и фаилы содержит архив
# xf  - (extract folder) опция для разархивирования(извлечения) содержимого архива
# xvf - (extract v folder) опция для разархивирования(извлечения) содержимого архива с выводом инфы в терминал

# $ tar cf archive.tar video              - будет создан архив archive.tar из папки video и ее содержимого(сама папка останется)
# $ tar tf archive.tar                    - просмотр в терминале какие папки и фаилы содержит архив
# $ tar xf archive.tar                    - будет извлечено содержимое архива (сам архив останется)
# $ tar xvf archive.tar                   - будет извлечено содержимое архива, а так же его содержимон выведется в терминал


# Если нужно не только создать архив, но и сжать его, то нужно воспользоваться одним из доступных методов компресии: gzip, bzip2, xz. Все они сжимают файлы архива .tar. Разница в методе(например чтото удобнее для картинок, чтото для текста итд), скорости и эффективности сжатия(компрессии).

# a. xz - команда для сжатия архива формата .tar. Сжимает существующий архив, добавляя к нему расширение .xz
# Сжимает текст 10k байт в 210 байт. Проверить: $ ls -l
# $ xz archive.tar                        - архив archive.tar будет сжат и станет archive.tar.xz
# $ unxz archive.tar.xz                   - распаковка сжатого архива archive.tar.xz обратно в archive.tar

# b. gzip - команда для сжатия архива формата .tar. Сжимает существующий архив, добавляя к нему расширение .gz
# Сжимает текст 10k байт в 180 байт. Проверить: $ ls -l
# $ gzip archive.tar                      - архив archive.tar будет сжат и станет archive.tar.gz
# $ gunzip archive.tar.gz                 - распаковка сжатого архива archive.tar.gz обратно в archive.tar

# c. bzip2 - команда для сжатия архива формата .tar. Сжимает существующий архив, добавляя к нему расширение .bz2
# Сжимает текст 10k байт в 160 байт. Проверить: $ ls -l
# $ bzip2 archive.tar                     - архив archive.tar будет сжат и станет archive.tar.bz2
# $ bunzip2 archive.tar.bz2               - распаковка сжатого архива archive.tar.bz2 обратно в archive.tar


# Так же при помощи команды tar можно создавать архив и сжимать его одной командой получая архив с расширением просто, например .gz. Изначальная папка остается.
# czf  - (create zip folder) опция которая говорит что создаем папку архива и сразу ее сжимаем
# cvzf  - (create v zip folder) создаем сжатый архив с выводом инфы в терминал

# $ tar czf archive.xz test              - архивируем и сжимаем папку test в сжатый архив archive.xz
# $ tar czf archive.gz test              - архивируем и сжимаем папку test в сжатый архив archive.gz
# $ tar czf archive.bz2 test             - архивируем и сжимаем папку test в сжатый архив archive.bz2

# Если вы его будете распаковывать с помощью "gunzip folder.gz" у вас появится просто файл "folder", без расширения. И вот чтобы разархивировать его окончательно, я использовал "tar -xf folder" и наконец получил заветную папку.

# $ tar -xf archive.xz                   - разархивируем archive.xz и ихвлечем его содержимое (архив остается)
# $ tar -xf archive.gz                   - разархивируем archive.gz и ихвлечем его содержимое (архив остается)
# $ tar -xf archive.bz2                  - разархивируем archive.bz2 и ихвлечем его содержимое (архив остается)



# 2. zip - команда для одновременной архивации и сжатия. Создает стандартный сжатый архив универсального формата .zip, подходящего для разархивации как на Linux, так и на Windows системах, тоесь лучше использовать его, если предполагается работа с этим архивом на разных системах. Но при этом сжатие не самое эффективное. Изначальная папка остается.
# Сжимает текст 10k байт в 320 байт. Проверить: $ ls -l
# $ zip -r название_архива_что_создаем.zip название_папки_которую_хотим_архивировать
# -r  - обязательный флаг. Реверс, типа с конца на начало ??

# $ zip -r archive.zip test               - архивируем и сжимаем папку test с ее содержимвм в архив archive.zip
# $ unzip archive.zip                     - разархивируем archive.zip. Архив остается



puts
puts '                                DPKG - установщик программ от .deb фаила'

# DPKG – программное обеспечение, позволяет установить программу из установочного фаила с расширением .deb (дебиан/убунту)

# В отличие от пакетного менеджера работает с фаилами установщиками, а не с репозиторием

# На примере Гуглхром, скачиваем установочный фаил .deb с оф сайта гуглхрома(предложит вариант DEB - дебиан/убунту), жмем кнопку, выбиваем просто сохранить фаил, чтобы установить его вручную, а не при помощи графического интерфейса

# Флаги:
# -i      - (install) значит что мы устанавливаем

# $ sudo dpkg -i [название_фаила.deb]      - (тут название берем из скаченного фаила(потом добавить)) установка приложения из фаила .deb

# Далее можно найти наше приложение через меню приложений или запустить через терминал. Название можно взять из имени фаила, до названии версии(например до слова stable)
# $ google-chrome

# я сделал так sudo dpkg -i google* и сработало (из комментов хз зачем)

# sudo apt auroremove <application name>      - тоесть удвляем пакетным менеджером ??

puts
puts '                                     wget - скачивания по URL'

# wget - команда для скачивания данных по полному URL адресу. (узнать адрес, правая кнопка -> "Копировать URL картинки")
# $ wget [полный URL-адрес]

# $ wget https://itproger.com/img/tests/1623991914.svg             - скачиваем картинку с данного URL в текущую директорию















#

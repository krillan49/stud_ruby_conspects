puts '                                            Шаблонизаторы'

# В приложениях (например Rails) часто используются шаблоны представлений (views) для генерации HTML с помощью встроенного Ruby-кода. ERB и Slim - наиболее популярные шаблонизаторы (template engine / движек шаблонов) 

# view - (вид/представление)это HTML-страница в формате, позволяющем вставлять в нее Руби-код, те относится к frontend (тому что загружается в браузер). Оно пошло из V аббревиатуры MVS (модель вид контроллер)

# ERB  - лучше для начинающих, при использовании стандартных HTML-шаблонов
# Slim - подходит для опытных разработчиков, для более чистого и лаконичного кода

# Есть другие template engine для HTML и не только, их можно посмотреть в доках соответсвующего фрэймворка, например для Синатры в разделе 'Available Template Languages'



puts '                                    Сравнение синтаксиса ERB и Slim'

# Возьмём простой ERB-шаблон и перепишем его в Slim для наглядного сравнения.
# Пример ERB-шаблона (index.html.erb)
# Тот же шаблон на Slim (index.html.slim)

# Элемент                  ERB                    Slim
# Открытие Ruby-кода       <% if ... %>           - if ...
# Вывод значения           <%= user.name %>       = user.name
# HTML-теги                <h1>...</h1>           h1 ...
# Простой текст в строке   <strong>text</strong>  strong text
# Смешанный текст и вывод  вручную в ERB          `
# Вложенность              по отступам            по отступам



puts '                                          ERB (Embedded Ruby)'

# https://github.com/ruby/erb

# ERB - (embedded Ruby/встроенный Руби) это HTML фаил позволяющий делать вставки на языке Руби

# .html.erb или .erb  -  расширения для view-HTML-фаилов (например index.erb или index.html.erb)

# + 
# Прост в освоении, похож на обычный HTML с вкраплениями Ruby
# Поддерживается "из коробки" в Rails
# Явно видно, где Ruby, а где HTML

# -
# Много визуального шума (<% %>, <%= %>)
# Труднее читать большие блоки логики из-за смешивания HTML и Ruby
# Не поддерживает выравнивание по отступам — нет строгой структуры

# Синтаксис вставки Ruby-кода:
# <% любой_руби_код %>     - строка Руби кода будет выполнена, но ничего не будет вставлено в HTML-страницу
# <%= любой_руби_код %>    - строка Руби кода будет выполнена и ее возврат будет вставлен в HTML-страницу в месте где стоит эта вствка
# <%# комментарий, который не попадёт в HTML %>

# Отдельные "кавычки"(<% %>) нужно ставить для каждой строки рубикода свои

# Примеры:
# <% @users.each do |user| %>
#   <p><%= user.name %></p>
# <% end %>



puts '                                                 Slim'

# https://github.com/slim-template/slim

# Slim - это альтернативный шаблонизатор, ориентированный на чистоту и краткость. Читается как структура данных или YAML

# https://github.com/slim-template/slim-rails
gem "slim-rails" # предоставляет генераторы Slim для Rails (автоматически создапваемые виды нгенерятся на Слим итд)

# + 
# Минималистичный и чистый синтаксис
# Лучше читается, особенно при большом количестве логики
# Автоматическое выравнивание и строгая структура через отступы
# Поддерживает интерактивный HTML без лишнего кода

# -
# Требует установки gem slim-rails
# Необходима привычка к новому синтаксису.
# Проблемы при копировании из HTML-макетов - нужно вручную адаптировать


# Синтаксис вставки Ruby-кода:
# - Ruby-код без вывода
# = Ruby-выражение с выводом
# / комментарий, не попадёт в HTML

# Пример:
# - @users.each do |user|
#   p = user.name

# Также можно писать HTML-элементы более компактно:
# h1.title Главная страница



puts '                                                 Slim отступы'

# В Slim отступы определяют структуру документа, как в YAML или Python

# Рекомендация:
# Используй 2 пробела как стандарт.
# Включи правило "Показывать табы и пробелы".
# Включи автоформатирование .slim файлов при сохранении (если доступно).


# 1. Отступ = структура
# Каждый уровень вложенности задаётся пробелами или табами, но нельзя смешивать их.

# ul
#   li Первый элемент
#   li Второй элемент
# Результат в HTML:

# <ul>
#   <li>Первый элемент</li>
#   <li>Второй элемент</li>
# </ul>


# 2. Отступы должны быть одинаковыми
# Выберите: либо два пробела, либо таб — и следуйте этому везде иначе вызовет ошибку при парсинге Slim.


# 3. Вложенный HTML или Ruby — всегда с отступом
# Всё, что логически вложено (внутри if, each, div, и т.д.), требует увеличения отступа

# - if @user
#   p Привет, = @user.name


# 4. Для многострочного текста — | или \
# Если хочешь писать длинный текст или использовать HTML без вложенности:

# p
#   | Это длинный абзац, который
#     продолжается на следующей строке

# Или:

# p \
#   Это тоже длинный текст,
#   который пишется через слэш.


# 5. Ruby-код без вывода — -

# - @items.each do |item|
#   li = item.name

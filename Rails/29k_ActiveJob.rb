puts '                                         ActiveJob'

# https://api.rubyonrails.org/classes/ActiveJob.html

# Некоторые задачи выполняются долго и если мы выполняем их синхронно(?? тоесть во время обработки запроса пользователя ??), то у пользователя в браузере произойдет таймаут, а если задача выполняется слишком долго браузер прервет выполнение и выдаст ошибку из-за того, что страница грузится слишком долго

# ActiveJob - это интерфейс встроенный в Рэилс для работы с фоновыми задачами, который позволяет отправлять задачи различным бэкендам/адаптерам(kafka, sidekiq), которые будут выполнять эти задачи в фоновом режиме (?? тоесть независимо от обработки запроса пользователя ??), те будут управлять очередями, задачами итд. Пользователь не ждет пока задача будет выполнена его запросы обрабатыватся и может дальше что-то делать в приложении и ничего не подвиснет, тк задача будет выполняться в бэкграунде

# Разделение функционала на ActiveJob и адаптеры удобно тем что, когда разные части прилоджения (например АктивРекорд или ЭкшенМэйлер итд) используют бэкграунд джобы, удобнее чтобы они все связывались с ActiveJob, а уже он их подключал к адаптерам, чем каждая часть прилоджения будет сама иметь какой-то функционал для связи с разными адаптерами.
# ?? Тоесть получается, что ActiveJob тут работает как посредник и управляющая прослойка, что-то вроде контроллера ??



puts '                                    движки/адаптеры/бэкенды'

# В Рэилс нет адаптеров по умолчанию, поэтому нужно специальное решение, которое будет правильным образом выполнять обработку, ставить задачи в очередь, при необходимости выполнять задачи снова, если возникла ошибка итд

# Наиболее популярные движки/адаптеры/бэкенды: Sidekiq, kafka(еще более сложое чем Sidekiq), GoodJob и Solidus Que

# Лучше использовать бекенды с Redis (например, Sidekiq):
# 1. Когда требуется высокая производительность и возможность обрабатывать множество задач одновременно.
# 2. Если приложение уже использует Redis или если вы планируете использовать его для других целей (например, кэширование)
# 3. Когда важна поддержка отложенных задач или приоритетов

# Лучше использовать бекенды с SQL БД (например, GoodJob или Solidus Que):
# 1. Если приложение уже использует PostgreSQL и вы хотите избежать дополнительных зависимостей
# 2. Когда важна надежность и возможность восстановления состояния задач после сбоя
# 3. Если работаете с небольшими объемами фоновых задач, где производительность не является критически важной

# Если нужна высокая производительность и многопоточность - выбирайте Sidekiq. Если важна надежность и простота развертывания - GoodJob или Solidus Que.



puts '                                          Sidekiq'

# Sidekiq использует Redis для хранения и обработки фоновых задач. Он поддерживает многопоточность, что позволяет обрабатывать несколько задач одновременно.

# Преимущества:
# 1. Высокая производительность благодаря многопоточности
# 2. Простота в использовании и настройке
# 3. Поддержка приоритетов задач и отложенных задач
# 4. Хорошая экосистема с множеством плагинов и инструментов мониторинга

# Недостатки:
# 1. Зависимость от Redis
# 2. Потенциальные проблемы с управлением состоянием, если задачи не завершены корректно (например, при сбоях)



puts '                                          GoodJob'

# GoodJob - это бэкенд для ActiveJob, который использует PostgreSQL для хранения задач. Он ориентирован на надежность и простоту.

# Преимущества:
# 1. Использует существующую базу данных (PostgreSQL), что упрощает развертывание
# 2. Хорошая поддержка транзакций и надежность (все задачи хранятся в БД)
# 3. Подходит для приложений, где уже используется PostgreSQL и нет желания добавлять Redis

# Недостатки:
# 1. Меньшая производительность по сравнению с Sidekiq из-за однопоточности (хотя поддержка параллелизма доступна).
# 2. Ограниченная функциональность по сравнению с более зрелыми системами, такими как Sidekiq



puts '                                         Solidus Que'

# Solidus Que - это бэкенд для ActiveJob, который также использует PostgreSQL. Он ориентирован на совместимость с Solidus (платформа электронной коммерции)

# Преимущества:
# 1. Оптимизирован для работы с Solidus и хорошо интегрируется с другими компонентами Solidus
# 2. Использует PostgreSQL, что может быть преимуществом в проектах, где уже используется эта БД

# Недостатки:
# 1. Может быть менее гибким и универсальным для других типов приложений
# 2. Меньшая экосистема по сравнению с Sidekiq












#

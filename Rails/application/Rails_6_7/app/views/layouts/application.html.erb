<!DOCTYPE html>
<html>
  <head lang="<%= I18n.locale %>"> <!--  I18n.locale  - добавим для языка перевода -->

    <meta charset="utf-8"> <!-- пропишем кодировку для I18n и еще много чего -->

    <title>Blog</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <!-- хелпер иконки -->
    <%= favicon_link_tag 'favicon.png' %>

    <!-- стили из application.css или application.scss, (?Если исользуется Sprockets Assets Pipeline то эти фаилы называются манифестами тк можно в них подключить другие css-фаилы?) -->
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>

    <!-- так же можно подключать стили из гемов -->
    <!-- подключим стили Font Awesome -->
  </head>

  <body>
    <!--                          Devise: Добавим для для отображения флеш-сообщений -->

    <p class="notice"><%= notice %></p>
    <p class="alert"><%= alert %></p>



    <!--                             Devise: Добавим ссылки входа и выхода -->

    <!-- Логичнее всего добавлять в шапку -->


    <!-- Вариант 1: хардкод -->
    <a href="/users/sign_in">Sign In</a>
    <a href="/users/sign_out" data-turbo-method="delete">Sign Out</a>
    <!-- data-turbo-method="delete" - В Rails 7 вместо data-method нужно использовать data-turbo-method. Иначе для sign_out возникнет ошибка при нажатии на ссылку, тк у маршрута /users/sign_out метод DELETE -->


    <!-- Вариант 2: хэлперы -->
    <%= link_to "Sign In", new_user_session_path %> <!-- GET /users/sign_in(.:format)  devise/sessions#new -->
    <%= link_to "Sign Out", destroy_user_session_path, method: :delete %> <!-- GET /users/sign_out(.:format) devise/sessions#destroy (!!! delete при помощи запроса GET) -->

    <!-- Вариант из комментов(! но у меня и как выше сработало изза того что производил манипуляции в роутес и конфиг ??): -->
    <%= link_to 'Sign Out', destroy_user_session_path,
    data: { 'turbo-method': :delete, 'turbo-confirm': 'Выйти? Вы уверены?' } %>


    <!-- Вариант 2-2: выведем почту/имя пользователя если авторизированы, и уберём Sign Out ссылку, когда мы не авторизованы, при помощи обработчиков хэлперов. -->
    <!-- https://github.com/heartcombo/devise#controller-filters-and-helpers -->
    <!-- user_signed_in? - хэлпер созданный Devise, возвращает true или false, в зависимости от того авторизован или нет данный пользователь -->
    <!-- current_user - хэлпер созданный Devise, возвращает объект сущности User текущего пользователя, соотв можно от него вызывать методы сущности(столбцы таблицы) -->
    <% if user_signed_in? %>
      <!-- а. Вариант с почтой -->
      Hello, <%= current_user.email %> | <%= link_to "Sign Out", destroy_user_session_path, method: :delete %>
      <!-- б. Вариант с именем, поле которого мы добавили в User и в форму devise/registrations/new.html.erb -->
      Hello, <%= current_user.username %> | <%= link_to "Sign Out", destroy_user_session_path, method: :delete %>
    <% else %>
      <%= link_to "Sign In", new_user_session_path %>
    <% end %>



    <!--                         i18n меню для переключения языков(для шапки бутстрап) -->

    <ul class="nav mb-2 mb-md-0">
      <li class="dropdown">
        <%= link_to '#', class: 'nav-link px-2 dropdown-toggle', data: {"bs-toggle": 'dropdown'} do %>
          <%= tag.div '', class: "flag #{I18n.locale}-flag mt-1" %> <!-- просто тег для бэкграунда картинки текущего языка, интерполяция для названия классов - разные css-свойства для разных языков -->
          <%= t I18n.locale %> <!-- Название текущей локали -->
        <% end %>

        <!-- Можно было и без дропдаун, списка и цикла сделать лишь 2 ссылки переключения с url_for(locale: :ru) и url_for(locale: :en) если мало языков -->
        <ul class="dropdown-menu"> <!-- дропдаун с выбором локали -->
          <% I18n.available_locales.each do |locale| %>
            <li>
              <% if I18n.locale == locale %> <!-- если текущая локаль равна конкретной локали, одной из списка доступных -->
                <%= tag.span t(locale), class: 'dropdown-item' %> <!-- отображаем ее просто как текст с названием локали -->
                <!-- t(locale) - это перевод названия локали(:en, :ru) на нужный язык -->
              <% else %> <!-- если текущая локаль не равна локали из переменной, тогда сделаем ее ссылкой на переключение -->
                <%= link_to t(locale), url_for(locale: locale), class: 'dropdown-item' %> <!-- ссылка переключения локали, добавляет имя локали в URL в (:locale) -->
                <!-- root_path(locale: locale) - перебрасывает на главную -->
                <!-- url_for(locale: locale)   - не перебрасывает на главную, остается на той же странице, но не сохраняет дополнительные значения в гет-запросе после знака ?, а там например стоит пагинация, чтобы это дополнительно улучшить можно использовать вариант отсюда https://stackoverflow.com/questions/35189892/rails5-params-merge-causes-errors-about-being-insecure -->
              <% end %>
            </li>
          <% end %>
        </ul>
      </li>
    </ul>



    <!--                                         Флэш-сообщения -->

    <!-- Отображаем наши флэш сообщения(тут используем бутстрап стили), тк теперь после редиректа будет доступен объект flash со всеми значениями присвоенными по ключам в контроллере -->
    <!-- 0. Посмотреть объект флэша -->
    <%= flash.inspect %>
    <!-- 1. Для сообщения по конкретному ключу -->
    <%= flash[:nitice] %>
    <!-- 2. Для универсального сообщения по разным ключам можно написать чтото типа этого -->
    <% flash.each do |k, v| %>
      <!-- flash - это хранилище похожее на хэш но не являющееся хэшэм ? -->
      <!-- k - тут передает :success; v - передает "Question created!" -->

      <!-- Вариант 1: синтаксис html -->
      <div class="alert alert-<%= k %>"> <!-- подставляем ключ k, который у нас имеет значение :success в значение класса, те получаем класс бутстрапа alert-success -->
        <%= v %> <!-- передаем значение, например "Question created!" -->
      </div>

      <!-- Вариант 2: синтаксис Рэилс с хэлпером tag (эта конструкция аналог для той что выше) -->
      <%= tag.div v, class: "alert alert-#{k}", role: 'alert' %>

    <% end %>



    <main class="container mt-3">
      <!-- Указывает Рельсам, что тут нужно рендерить шаблоны -->
      <%= yield %>
    </main>


    <!-- Футер со вставкой года от сегодняшней даты(Руби) -->
    <footer>
      &copy; Kroker <%= Time.now.year %>
    </footer>


  </body>
</html>












<!--  -->

<!--                          Хэлпер для названия вкладки с названием страницы -->

<!-- Эту конструкцию, но с другими значениями вместо 'Questions' можем добавить на другие страницы чтобы изменять название во вкладке браузера -->
<% provide :page_title, 'Questions' %>
<!-- provide  - встроенный хэлпер передающий значение(тут 'Questions') для конкретного yield с именем :page_title -->



<!--                      Кастомные хэлперы для динамического меню, переданного через yield -->

<!-- Вызываем наш хэлпер, рендерищий меню и передающий имя страницы -->
<!-- Придется его подключить на каждой странице, а иначе меню не будет отображаться, тк рендерится оно именно в хэлпере, а в yield :main_menu только передается. -->
<% currently_at 'Questions' %>
<!-- 'Questions' - передаем параметром хэлпера название нашей страницы, которое должно быть идентично названию в ссылках с которых на эту страницу осуществляется переход -->




<!--                                          Контент страницы -->

<h1 class="mb-4">Questions</h1>

<%= link_to 'New question', new_question_path, class: 'btn btn-primary btn-lg' %>

<!-- Пагинация вариант 1: kaminari - кнопки для переключения страниц -->
<%= paginate @questions %>
<!-- paginate - специальный хэлпер kaminari для того чтобы переключаться по страницам -->

<!-- Пагинация вариант 2: pagy - кнопки для переключения страниц -->
<%== pagy_bootstrap_nav @pagy %>

<!-- Пагинация вариант 2-1: pagy - скрываяем отображение кнопок, если есть только 1 страница -->
<%== pagy_bootstrap_nav(@pagy) if @pagy.pages > 1 %>
<!-- pages - метод возвращает коллич страниц -->

<!-- Пагинация вариант 2-2: pagy - аналогично предыдущему, но вынесено в хэлпер pagination чтобы не писать везде условие -->
<%= pagination(@pagy) %> <!-- теперь мы просто можем подставлять это везде -->

<% @questions.each do |question| %>
  <article class="card mt-3">
    <div class="card-body">
      <h4><%= question.title %></h4>

      <section class="card-text">
        <time datetime="<%= question.formatted_created_at %>">
          <small><%= question.formatted_created_at %></small>
        </time>

        <div>
          <%= truncate strip_tags(question.body), length: 150, omission: '... (continued)' %>
          <!-- обрезаем длинну вопроса и удаляем теги в тексте хэлперами -->
        </div>
      </section>

      <%= link_to 'Show', question_path(question), class: 'btn btn-primary' %>
      <%= link_to 'Edit', edit_question_path(question), class: 'btn btn-secondary' %>
      <%= link_to 'Destroy', question_path(question), class: 'btn btn-danger',
        data: {method: :delete, confirm: 'Are you sure?'} %>
    </div>
  </article>
<% end %>

<!-- Пагинация вариант 1: kaminari - кнопки для переключения страниц -->
<%= paginate @questions %>
<!-- paginate - специальный хэлпер kaminari для того чтобы переключаться по страницам -->

<!-- Пагинация вариант 2: pagy - кнопки для переключения страниц -->
<%== pagy_bootstrap_nav @pagy %>

<!-- Пагинация вариант 2-1: pagy - скрываяем отображение кнопок если только 1 страница -->
<%== pagy_bootstrap_nav(@pagy) if @pagy.pages > 1 %>
<!-- pages - метод возвращает коллич страниц -->

<!-- Пагинация вариант 2-2: pagy - аналогично предыдущему но вынесено в хэлпер pagination чтобы не писать везде условие -->
<%= pagination(@pagy) %> <!-- теперь мы просто можем подставлять это везде -->






<!--                          Вариант 2: с выносом в паршал итерации вопросов и TomSelect  -->

<% provide :page_title, t('.title') %>
<% currently_at t('menu.questions') %>

<h1 class="mb-4"><%= t('.title') %></h1>

<!--                  (ManyToMany) Форма для выбора отображения вопросов по тегам  -->
<%= form_with url: questions_path, method: :get do |f| %>
  <!-- url: questions_path  - тоесть на эту же страницу (будем отправлять форму в index) -->
  <!-- method: :get - тоесть передаем методом GET -->
  <%= f.collection_select :tag_ids, (@tags || []), :id, :title, {selected: params[:tag_ids]},
    multiple: true, required: true, class: 'js-multiple-select', data: {'ajax-url': '/api/tags'} %>
    <!-- :tag_ids имя селесктора -->
    <!-- (@tags || []) либо коллекция тегов переданная из index либо пустая коллекция -->
    <!-- :id - метод(модели) который нужно применять к сущности из коллекции tags для значений элементов(передаются на сервер) селектора  -->
    <!-- :title - заголовки тегов те их имена (метод модели) -->
    <!-- {selected: params[:tag_ids]} - те когда эта форма будет отправлена и вернется страница то в селекторе уже будут выбраны все те варианты что мы собствено выбрали до отправки формы -->
    <!-- required: true - валидация запрещает отправку пустой формы -->
    <!-- data: {'ajax-url': '/api/tags'} - опции ассинхронного поиска где:
      'ajax-url' - это опция для указания URL
      '/api/tags' - это URL к которому обращается ассинхронный запрос, когда пользователь вводит символы в поле селектора
    -->

  <%= f.submit t('global.button.submit'), class: 'btn btn-primary' %>
<% end %>

<!-- Обернем в политику кнопоку нового вопроса для скрытия от пользователей без соотв доступа (UsersRoles) -->
<% if policy(:question).new? %>
  <!-- :question - тк сущности вопроса тут еще нет, то передадим просто символ-название политики, в Pundit это тоже сработает -->
  <%= link_to t('.new'), new_question_path, class: 'btn btn-primary btn-lg mb-3' %>
<% end %>

<%= pagination @pagy %>

<%= render @questions %> <!-- Вынесем итерацию в паршал _question.html.erb  -->

<%= pagination @pagy %>













<!--  -->

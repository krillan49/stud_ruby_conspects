<!--                                эта форма будет рендериться и в new и в edit -->

<!-- Генерируем форму при помощи вспомогательной функции form_with. Начиная с новых версий(6?) рекомендуется использовать эту вспомогательную функцию для генерации формы -->
<%= form_with model: @question do |f| %>
  <!-- model: @question  - используем экземпляр модели созданный в экшене new или edit:
    для new (новой пустой сущьеости) создаст URL post '/question'  - тоесть отправит в экшен create;
    для edit (существующей сущьности) создаст URL patch '/question/:id' - тоесть, подставит action="/questions/1", айди для которого возьмет в объекте @question и отправит в экшен update -->
  <!-- url: '/question' - можно и так харкодить URL вместо model: @question, но тогда придется создавать 2 формы -->

  <!-- Для edit будет добавлено скрытое поле: -->
  <input type="hidden" name="_method" value="patch" autocomplete="off" />

  <!-- Для представления edit, значения полей будут автоматически подставлены из @question -->

  <div>
    <%= f.label :title %>
    <%= f.text_field :title, required: true, minlength: 2, placeholder: 'Title' %>
    <!-- required: true, minlength: 2  - атрибуты required="required" minlength="2" будут добавлены в тег, при помощи них браузер будет проводить валидацию поля на стороне клиента(что не отменяет неоходимости валидации на сервере, тк клиентскую проверку очень легко обойти) -->
    <!-- placeholder: 'Title'  - атрибут placeholder="Title" будет добавлен в тег -->
  </div>

  <div>
    <%= f.label :body %>
    <%= f.text_area :body, required: true, minlength: 2 %>
  </div>

  <!-- селектор(вариант 1) для выбора тегов для данного вопроса (ManyToMany) -->
  <div>
    <%= f.label :tags %>
    <%= f.collection_select :tag_ids, tags, :id, :title, {}, multiple: true %>
    <!-- collection_select - хэлпер селектора, который может принимать коллекцию сущностей и подставлять ее свойства -->
    <!-- :tag_ids - название(name) поля (для params) -->
    <!-- tags - коллекция всех тегов которую сюда передаем из questions/new.html.erb или questions/edit.html.erb -->
    <!-- :id - метод(модели) который нужно применять к сущности из коллекции tags для значений элементов селектора (передаются на сервер) -->
    <!-- :title - метод(модели) который нужно применять к сущности из коллекции tags при отображении лэйблов(названий тегов) на странице в пунктах селектора -->
    <!-- {} - пустые опции  -->
    <!-- multiple: true - ставит атрибут multiple в селектор (выбор множества вариантов через Ctrl) -->
  </div>
  <!-- селектор(вариант 2) с ассинхронными запросами и поиском вместо списка при помощи blueprinter (ManyToMany) -->
  <div>
    <%= f.label :tags %>
    <%= f.collection_select :tag_ids, @question.tags, :id, :title, {}, multiple: true,
      class: 'js-multiple-select', data: {'ajax-url': '/api/tags'} %>
      <!-- @question.tags вместо tags, чтобы отображались выбранные теги в questions/edit.html.erb либо получится пустая коллекция в questions/new.html.erb, а теги для поиска будут приходить из сгенерированного json  -->
  </div>

  <%= f.submit "Submit question!" %>
<% end %>










<!--  -->

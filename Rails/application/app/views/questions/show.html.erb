<!--                                           Вывод вопроса -->

<h1 class="mb-4"><%= @question.title %></h1>
<!-- @question прописан и в create контроллере Answers, нужно на случай с непройденной валидацией и рендером этой страницы -->

<!-- formatted_created_at - наш кастомный метод модели/хэлпер, нужно прописать в модель Question -->
<time datetime="<%= @question.formatted_created_at %>">
  <%= @question.formatted_created_at %>
</time>

<!-- На примере вывода тела вопроса - хэлперы обработки тегов в тексте -->
<div class="lead my-3">
  <!-- 1. По умолчанию введенные пользователем в поле теги не обрабатываются, но их символы остаются -->
  <%= @question.body %>
  <!-- 2. html_safe - обрабатывает любые теги -->
  <%= @question.body.html_safe %>
  <!-- 3. sanitize - обрабатывает только безопасные теги -->
  <%= sanitize @question.body %>
  <!-- 4. Удаляет символы тегов, не обрабатывает их отавляя только текст из их тел -->
  <%= strip_tags @question.body %>
</div>

<!-- Юзер которму принадлежит статья и его аватар через граватар (OneToMany) -->
<%= @question.user.gravatar %>
<%= @question.user.name_or_email %>

<!-- Рендерим паршал формы комментариев (Polym_assoc) -->
<%= render 'comments/commentable', commentable: @question, comment: @comment, html_id: 'questionComments' %>
<!-- 'comments/commentable' - паршал который рендерим -->
<!-- commentable: @question - передаем вопрос в локальную переменную паршала commentable -->
<!-- comment: @comment - передаем комментарий в локальную переменную паршала comment, его тут нет и он не планируется, но если созданный в данной форме коммент не пройдет валидацию, то этот коммент уже будет объявлен и нужен для сообщения об ошибке -->
<!-- html_id: 'questionComments' - передаем значение якоря для открытия комментов к вопросу, при помощи dom_id, тк вопрос на странице только один то можем захардкодить значения для якоря и передать просто строку -->

<%= link_to 'Edit', edit_question_path(@question), class: 'btn btn-secondary' %>
<%= link_to 'Destroy', question_path(@question), class: 'btn btn-danger', data: {method: :delete, confirm: 'Are you sure?'} %>
<!-- По умолчанию не сможет удалить если у этого вопроса есть связвнные ответы, чтобы было можно, нужно настроить в модели -->

<!-- Вариант тех же кнопок с переводами и скрытием для пользователей бнз соотв доступа (UsersRoles) -->
<% if policy(@question).edit? %>
  <%= link_to t('global.button.edit'), edit_question_path(@question), class: 'btn btn-secondary' %>
<% end %>
<% if policy(@question).destroy? %>
  <%= link_to t('global.button.delete'), question_path(@question), class: 'btn btn-danger',
    data: {method: :delete, confirm: t('global.dialog.you_sure')} %>
<% end %>


<hr class="my-3">



<!--                                           Форма для ответа -->

<h2>Write your answer</h2>

<!-- Вариант 1: Пишем код для формы в данном фаиле -->

<!-- Используем общий паршал для ошибок  -->
<%= render 'shared/errors', object: @answer %>

<%= form_with model: [@question, @answer] do |f| %> <!-- post '/questions/:question_id/answers' -->
<!-- @answer = @question.answers.build  - прописали в экшене show Questions для создания URL -->

  <div>
    <%= f.label :body %>
    <%= f.text_area :body, class: 'form-control' %>
  </div>

  <%= f.submit "Submit answer!", class: 'btn btn-primary' %>
<% end %>


<!-- Вариант 2: можно вынести в отдельный паршал формы - answers/_form.html.erb, причем поместить туда и фому и паршал ошибок. Что удобно тк эту форму вместе с паршалом ошибок можно использовать и в answers/edit.html.erb -->
<%= render 'answers/form' %>
<!-- И просто рендерим паршал формы из другой директории сюда используя путь с директорией, тк тут директория questions -->



<!--                                           Вывод всех ответов -->
<h2 class="mt-5">Answers</h2>

<!-- Вариант 1: Пишем код в цикле с разметкой для ответа прямо тут -->
<% @answers.each do |answer| %>
<!-- @answers = @question.answers.order created_at: :desc  -  прописали в экшене show контроллера Questions, вместо того чтоб писать @question.answers тут -->
<!-- Тоже самое прописали и в create контроллере Answers, нужно на случай с непройденной валидацией и рендером этой страницы -->

  <!--                            Блок ответа, с якорем для ссылки якоря -->

  <!-- Вариант 1 обычный -->
  <article class="mb-3" id="answer-<%= answer.id %>">
  <!-- id="answer-... - добавим id, что будет якорем для ссылки-якоря, значение будет с id из БД конкретного ответа -->

    <!-- formatted_created_at - наш кастомный хэлпер, нужно прописать в модель Answer -->
    <time datetime="<%= answer.formatted_created_at %>">
      <%= answer.formatted_created_at %>
    </time>

    <p><%= answer.body %></p>

    <!--                           Ссылки удаления, редактирования -->
    <%= link_to 'Delete', question_answer_path(@question, answer), data: {method: :delete, confirm: "Are you sure?"} %>
    <!-- question_answer_path(@question, answer) - передаем 2 параметра тк для URL нам нужны оба айдишника, важно сохранить порядок чтоб обладающая сущность стояла первой. Получим URL /questions/2/answers/2 -->
    <%= link_to 'Edit', edit_question_answer_path(@question, answer), class: 'btn btn-info btn-sm' %>

  </article>

  <!-- Вариант 2 при помощи хэлпера dom_id -->
  <%= tag.article class: 'mb-3', id: dom_id(answer) do %>
    <!-- тут все тоже что выше между <article> и </article>-->
  <% end %>
  <!-- id: dom_id(answer) - добавим id-якорь для ссылки-якоря, в которой значением будет id из БД конкретного ответа -->

<% end %>


<!-- Вариант 2а: Вынесем код с разметкой для ответа в отдельный паршал в директории ответов answers/_answer.html.erb -->
<!-- Цикл нам будет уже не нужен, тк Рэилс принимая коллекцию(массив) @answers автоматически будет выводить каждый ответ из нее применяя к нему паршал _answer.html.erb -->
<%= render partial: 'answers/answer', collection: @answers, as: :answer, locals: {question: @question} %>
<!-- partial: 'answers/answer'  - обозначаем что рэндерим именно паршал -->
<!-- collection: @answers  - обозначаем то что за переменной коллекция, чтобы рендерило каждый элемент по очереди как в each -->
<!-- as: :answer  - задаем что каждый элемент коллекции в паршале будет присваиваться в пеменную answer -->
<!-- locals: {question: @question} - создаем в паршале локальную переменную question в которую присваиваем @question. Это нужно на случай если паршал будет применяться не только тут а и на странице где из экшена не приходит @question -->

<!-- Вариант 2б: Без доп опций, если точно знаем что используем там где @question определен -->
<!-- Рэилс автоматически понимает все описанное сверху, кроме locals: {question: @question} и потому этот синтаксис сработает только там где из экшена в вид и соотв рендерищийся в нем паршал передается переменная @question. Это работает так: по умолчанию Рэилс понимает что это коллекция, идет в директорию с тем же названием что и переменная и рэндерит паршал с тем же названием(но в единственном числе) -->
<%= render @answers %>













<!--  -->

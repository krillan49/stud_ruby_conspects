puts '                                 Регистрация, аутентификация и авторизация'

# Аутентификация - проверка пользователя и пароля. Это процесс, когда мы понимаем кто вошел в систему, пользователь предоставляет свои учетные данные, например логин и пароль (или смарткарта или специальный токен от соцсети, если вход через соцсеть), мы проверяем их, после чего по этим данным устанавливаем кто вошел в приложение

# Авторизация - наделение определёнными правами, в зависимости от роли(юзер, админ итд). Это процесс, когда мы проверяем может ли данный пользователь выполнять то или иное действие (например создать или удалить запись)

# Тк HTTP это протокол staytless(без состояния), потому после того как сервер возвращает на запрос пользователя данные, соединение сразу обрывается. Соотв технология логина не зависит от соединения.

# Для того чтобы авторизоваться, пользователь подключается к серверу, посылает свой логин и пароль, а сервер возвращает ему уникальный Cookie(токен). Cookie остается у пользователя. Далее когда от данного пользователя поступает следующий запрос, то вместе с ним посылается этот уникальный токен, по нему сервер определяет состояние пользователя. Когда пользователь разлогинивается эта Cookie удаляется. Тоесть куки тут это временный идентификатор пользователя.

# Сервер распознает Cookie с помощью криптографических алгоритмов, которые не требуют обращения к БД. Механизм шифрования основан на цифровой подписи.

# В Rails главный секретный ключ(нужен чтобы устанавливать куки для пользователей) config.secret_key =(изначально закоменчен) находится /config/initializers/devise.rb

# (можно залогиниться автоматически не зная логина и пароля, но зная куки для сайта, пока не было разлогина и если куки не привязаны к айпи адресу)



puts '                                             Механизм сессий'

# Механизм сессий выдает Cookie пользователю при первом обращении к серверу, и затем без авторизации идёт обмен данными. Так сервер будет отличать неавторизованных пользователей друг от друга, например для корзины товаров итд.

# Минус сессий в том что они иногда могут быть обнулены, например при перезапуске сервера

# В Рэилс приложении осуществляется при помощи хэша(? или объекта похожего на хэш), который для каждого пользователя разный
session['key'] = 'value'



puts '                               Способы для авторизаци и регистрации на Рэилс'

# 1. Можно использовать строронние решения(гемы), такие как:
# Devise
# Clearance
# Sorcery

# 2. Сделать собственное решение



puts '                                 Базовый способ регистрации и авторизации'

# Rails предоставляет максимально простой вариант системы авторизации на сайте. Все функции и действия уже прописаны, но необходимо их активировать. Для добавления авторизации необходимо добавить команду http_basic_authenticate_with в контроллере а также указать логин и пароль.

# except (кроме) - указываем страницы что будут доступны для незарегистрированных пользователей;
# only (только)  - указываем страницы что будут доступны только для зарегистрированных пользователей.

# На примере blog_ip и его контроллера posts:
class PostsController < ApplicationController
  http_basic_authenticate_with name: "admin", password: "123456", except: [:index, :show]
  # except: [:index, :show]  -  страницы на которые может зайти любой гость
  # name: "admin", password: "123456"  - логин или пароль для захода на остальные страницы

  # ... какието экшены и методы ...
end
# В итоге при попытке зайти на неразрешенную гостю страницу, будет вызванно всплывающее окно с выше заданными полями, если значения не верны то перевызовется, если нажать отмена то выдаст пустую страницу с сообщением, а если верны, то произойдет вход

# Пользователь как-то сохраняется(через куки??)
# Хз как выйти из "акаунта" ??
















#

puts '                                 Регистрация, аутентификация и авторизация'

# Аутентификация - проверка пользователя и пароля. Это процесс, когда мы понимаем кто вошел в систему, пользователь предоставляет свои учетные данные, например логин и пароль (или смарткарта или специальный токен от соцсети, если вход через соцсеть), мы проверяем их, после чего по этим данным устанавливаем кто вошел в приложение и прописываем в сессию его юзер_айди из БД, чтобы потом когда он сделает еще запросы было понятно, что это он же


# Авторизация - наделение (проерка на наличие) определёнными правами, в зависимости от роли(юзер, админ итд). Это процесс, когда мы проверяем может ли данный пользователь выполнять то или иное действие (например создать или удалить запись)

# Тк HTTP это протокол staytless(без состояния), потому после того как сервер возвращает на запрос пользователя данные, соединение сразу обрывается. Соотв технология логина не зависит от соединения.

# Cookie (куки) - механизм распознания сервером пользователя, передается специальным заголовком "Set-Cookie: <cookie-name>=<cookie-value>", который сервер добавляет к своему ответу на HTTP-запрос, браузер запоминает ключ и значение из этого заголовка.
# Пример куки:
# Set-Cookie: _askme_session=b7i6rvf76t...76fbik76f; path=/; HttpOnly
# _askme_session         - имя куки
# b7i6rvf76t...76fbik76f - значение куки (защифрованный ключ)
# path=/                 - путь на целевом сайте, при обращении к которому и нужно передавать эту куки (тут "/" означает по любому пути на целевом сайте)
# HttpOnly               - опция означающая, что нужно передавать куки только при HTTP-запросах (не передавать при js-запросах)

# Для того чтобы авторизоваться, пользователь подключается к серверу, посылает свой логин и пароль, а сервер возвращает ему уникальный Cookie(токен). Cookie остается у пользователя. Далее когда от данного пользователя поступает следующий запрос, то вместе с ним посылается в заголовке запроса этот уникальный токен, по нему сервер определяет состояние пользователя. Когда пользователь разлогинивается эта Cookie удаляется. Тоесть куки тут это временный идентификатор пользователя.

# Сервер распознает Cookie с помощью криптографических алгоритмов, которые не требуют обращения к БД. Механизм шифрования основан на цифровой подписи.

# Рэилс генерирует ключ шифрования при первом запуске сервера и помещает во временный фаил tmp/development_secret.txt

# В Rails главный секретный ключ(нужен чтобы устанавливать куки для пользователей) config.secret_key =(изначально закоменчен) находится /config/initializers/devise.rb

# Алгоритм(хэлпер) расшифровки куки при помощи ключа шифования, который используется Рэилс сервером можно нагуглить чтобы попробовать вручную, в разных версиях Рэилс может быть разный
# В расшифрованной куки будет ?жсон? с айди сессии(уникальный для браузера, при каждой сессии новый), идентификационный токен(_csrf_token) по которому прилоение дополнительно сверяет пользователя и другими данными, которые в него помещались

# (можно залогиниться автоматически не зная логина и пароля, но зная куки для сайта, пока не было разлогина и если куки не привязаны к айпи адресу)



puts '                                 Объект session. Механизм сессий в Рэилс'

# Сессия - это абстрактное поняте, реализуемая при помощи механизма куки (может храниться в раузере или иногда в БД)

# Механизм сессий выдает Cookie пользователю при первом обращении к серверу, и затем без авторизации идёт обмен данными. Так сервер будет отличать неавторизованных пользователей друг от друга, например для корзины товаров итд.

# Минус сессий в том что они иногда могут быть обнулены, например при перезапуске сервера

# session - объект похожий на хэш, для удобного чтения и записи значений сессии в Рэилс-приложении (для каждого пользователя/браузера он разный и уникальный). Доступиен во всех экшенах контроллера
session['key'] = 'value'
session.to_h # можно преобразовать в обычный хэш если надо

# По умолчанию содержит session_id и _csrf_token, но мы можем добавить любые данные под дополнительными ключами, например:
session[:user_id] = 1
session[:current_time] = Time.now
session[:kroker] = 'ogromen'



puts '                               Способы для авторизаци и регистрации на Рэилс'

# 1. Можно использовать строронние решения(гемы), такие как:
# Devise
# Clearance
# Sorcery

# 2. Сделать собственное решение



puts '                                 Базовый способ регистрации и авторизации'

# Rails предоставляет максимально простой вариант системы авторизации на сайте. Все функции и действия уже прописаны, но необходимо их активировать. Для добавления авторизации необходимо добавить команду http_basic_authenticate_with в контроллере а также указать логин и пароль.

# except (кроме) - указываем страницы что будут доступны для незарегистрированных пользователей;
# only (только)  - указываем страницы что будут доступны только для зарегистрированных пользователей.

# На примере blog_ip и его контроллера posts:
class PostsController < ApplicationController
  http_basic_authenticate_with name: "admin", password: "123456", except: [:index, :show]
  # except: [:index, :show]  -  страницы на которые может зайти любой гость
  # name: "admin", password: "123456"  - логин или пароль для захода на остальные страницы

  # ... какието экшены и методы ...
end
# В итоге при попытке зайти на неразрешенную гостю страницу, будет вызванно всплывающее окно с выше заданными полями, если значения не верны то перевызовется, если нажать отмена то выдаст пустую страницу с сообщением, а если верны, то произойдет вход

# Пользователь как-то сохраняется(через куки??)
# Хз как выйти из "акаунта" ??
















#

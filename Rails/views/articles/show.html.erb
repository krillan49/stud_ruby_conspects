<!--                                          Вывод отдельной статьи -->

<h1><%= @article.title %></h1>
<p><%= @article.text %></p>


<!--                                          Форма для комментариев 1(обычная) -->

<!-- По умолчанию URL формы будет '/articles/id'(show), но нам нужен '/articles/:article_id/comments', можно поменять вручную, но так делать не рекомендуется -->
<!-- Потому для настройки нужного URL нужно использовать такой синтаксис со связью сущностей  -->
<%= form_for([@article, @comment]) do |f| %><% end %>
<!-- но у нас нет переменной @comment в контроллере articles#show get '/articles/id' из которого и возвращается представление с формой -->

<!-- Тк нет переменной @comment используем метод build -->
<!-- У нас есть коллекция(тут @article.comments). Если применить к этой коллекции метод build, то создастся новый объект Comment, все поля которого будут пустыми, за исключением aricle_id, соответсвующего @article, те привязан к нашей статье. Этот объект пока не будет сохранен, но его будет достаточно для создания нужного URL для form_for -->
<%= form_for([@article, @article.comments.build]) do |f| %>
  <!-- Теперь у нас есть нужный URL '/articles/:article_id/comments' в атрибуте action -->

  <p>
    <%= f.label :author %> <!-- <label for="comment_author">Author</label> -->
    <%= f.text_field :author %> <!-- <input type="text" name="comment[author]" id="comment_author" /> -->
  </p>
  <p>
    <%= f.label :body %> <!-- <label for="comment_body">Body</label> -->
    <%= f.text_area :body %> <!-- <textarea name="comment[body]" id="comment_body"> -->
  </p>

  <p><%= f.submit %></p> <!-- <input type="submit" name="commit" value="Create Comment" data-disable-with="Create Comment" /> -->

<% end %>

<!--                                   Форма для комментариев 2 (Devise: username) -->

<% if user_signed_in? %>
  <!-- Можно поместить сюда форму чтобы не было ошибки изза current_user.username -->
<% else %>
  <h4>Войдите или зарегестрируйтесь чтобы оставить комментарий</h4>
<% end %>

<!-- 1. Норм вариант -->
<%= form_for([@article, @article.comments.build]) do |f| %>
  <p>
    <%= current_user.username %> <!-- просто, username тк лэйбл к скрытому полю нафиг не нужен -->
    <%= f.hidden_field :author, value: current_user.username %>
    <!-- value: current_user.username - задаем значение поля с именем текущего пользователя -->
    <!-- hidden_field - для скрытого поля -->
    <!-- <input autocomplete="off" type="hidden" value="kroker" name="comment[author]" id="comment_author" /> -->
  </p>
  <p>
    <%= f.label :body %>
    <%= f.text_area :body %>
  </p>
  <p><%= f.submit %></p>
<% end %>

<!-- 2. Мой мутный вариант, где изменяется форма вместо добавления параметра value в нужное поле -->
<%= form_for([@article, @article.comments.new(:author => current_user.username)]) do |f| %>
<!-- Вместо создания временной сущности комментария только с article_id создаем временную сущность с заполненным полем username(заполненные поля автоматически заполняются и в форме) методом new вместо build. Теперь поле author получает значение value с именем пользователя -->
<% end %>


<!--                                           Вывод комментариев -->

<h2>Комментарии:</h2>

<!-- Комментарии тоже удобно выводить от связи @article.comments, не определяя в articles#show других переменных -->

<!-- Пустой комментарий, созданный формой выше будет тоже содержаться в @article.comments (последним в массиве), если вывод комментов будет располагаться ниже формы, потому если он ниже как тут, то нужно дописать костылей. -->
<%= 'Пока еще нет комментариев' if @article.comments.empty? %>

<% @article.comments.each do |comment| %>

  <p><b>Автор:</b> <%= comment.author %></p>
  <p><%= comment.body %></p>
  <hr>

<% end %>












<!--  -->

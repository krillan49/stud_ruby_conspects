puts '                                              Rails'

# https://www.fastruby.io/blog/ruby/rails/versions/compatibility-table.html   совместимость версий Руби и Рэилс

# http://guides.rubyonrails.org/routing.html  -  Rails Routing from the Outside In — Ruby on Rails Guides
# http://rusrails.ru/command-line             -  Rusrails: Командная строка Rails

# https://gorails.com/setup/ubuntu/21.04      -  Хороший гайд по установке Ruby/Rails на разные ОС
# https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-ubuntu-18-04   - Установка Ruby/Rails на Ubuntu

# https://www.youtube.com/watch?v=6_ek4hokiak  - установка и настройка для Рэилс 6
# https://www.youtube.com/watch?v=tqSkBmODHBk  - установка и настройка для Рэилс 7
# (Установка: Ruby, RVM(линукс), Ruby на Windows, SQLite 3, переменных среды на Windows, NodeJS и небольшая ремарка о node-gyp, Yarn и проверка, Обновление подсистемы RubyGems)



puts '                                             Установка'

# Для работы c Rails предварительно нужно установить:
# 1. Ruby
# 2. SQL-СУБД(SQLite3, PostgreSQL итд)
# 3. Node.js
# 4. Yarn



puts '                                        Установка для Wíndows'

# 1. Устанавливаем Руби:
# https://rubyinstaller.org/downloads/   -  версия с WITH DEVKIT, выделенная жирным.
# Во время установки ставим все галочки(разве что можно не ставить галочку документации во втором окне). Ставим галочку run reader install, затем в открывшемся терминале по очереди вводим все предложенные цифры(хотя 2ю не обязательно) + энтер(по очереди)


# 2. Устанавливаем SQLite3 (или другую СУБД):
# https://www.sqlite.org/index.html  ->  Download  ->  Precompiled Binaries for Windows -> sqlite-dll-win64-x64-3430200.zip (там лежит фаил dll), его нужно положить в любую директорию, которая видна в переменной среды Path
# > sqlite3 --version


# 3. Устанавливаем Node.js
# https://nodejs.org/en   -  Качаем LTS-версию, тоесть стабильную.
# В процессе установки обязательно нужно поставить галочку на пункте "Установить пакетный менеджер NPM", тк он позволяет устанавливать сторонние библиотеки
# Желательно поставить галочку на "Хотите ли вы доставить дополнительные компоненты для компилирования библиотек", добавит инструменты для компиляции библиотек, тк некоторые библиотеки нужно компилировать. Если галка не была поставлена, то чтобы узнать, нужно ли установить дополнительно - нужно воспользоваться руководством тут https://github.com/nodejs/node-gyp
# > node --version


# 4. Установить пакетный менеджер Yarn(позволяет добавлять всякие штуки для фронтэнда)
# https://yarnpkg.com/getting-started/install
# Если уже стоит Node.js, то достаточно воспользлваться командой:
# > corepack enable        - обязательно нужно вводить в консоли от имени администратора
# Инструкции по обновлению там же в разделе миграций(не делал)
# > yarn -v                - работает только в классической командной строке
# (https://www.youtube.com/watch?v=tqSkBmODHBk  17-16  - исправление ошибок с yarn версиями 2 или 3)
# Если обновляем версию yarn с 1й на 2ю или 3ю, то нужно в конрневой директориии проекта создать фаил .yarnrc.yml (код там)

# Команды апгрэйда yarn, стоит переодически использовать:
# > yarn upgrade                   - для версий 1.
# > yarn upgrade-interactive       - для версий 2. и 3.
# > yarn plugin interactive-tools  - если предыдущая команда выдала херню, то запустить это(добавит плагин) и потом снова предыдущую команду

# удаление чеголибо (тут some) из yarn:
# > yarn remove some


# 5. Обновление подсистемы rubygems(помогает избежать некоторых ошибок)
# > gem update --system


# 6. Устанавливаем Рэилс
# > gem install rails  - собственно устанавливаем Рэилс
# > rails -v           - посмотреть версию Рэилс



puts '                                          Установка для *nix'

# Установка Руби через RVM для *nix-систем(Unix-подобная операционная система, например Линукс и МакОС):
# https://rvm.io/         -  лучше использовать только 1е две команды, тк 3я это установка Рэилс и лучше его установить отдельно
# $ rvm install 3.0.3     -  (после пункта выше) Установка, где цифры это версия Руби
# $ rvm use 3.0.3         -  (после пункта выше) Переключение версии Руби, где цифры это версия Руби



# Установка ruby через RVM (из конспектов Рубишколы):
# 1. Посмотрим доступные версии Rails:
# $ gem search '^rails$' --all
# 2. Чтобы установить конкретную версию, введите (тут вместо rails_version - номер версии):
# $ gem install rails -v rails_version
# 3. С помощью gemset-ов можно использовать вместе разные версии Rails и Ruby. Это делается с помощью команды gem. Gemset-ы позволяют создавать полнофункциональные окружения для gem-ов, а также настраивать неограниченное количество окружений для каждой версии Ruby.
# $ rvm gemset create gemset_name     - create a gemset
# $ rvm ruby_version@gemset_name      - specify Ruby version and our new gemset
# https://github.com/DefactoSoftware/Hours



puts '                                           Создание приложения'

# > rails new blog   -  коменда cоздаcт новое рейлс-приложение в выбранной папке, где:
# blog - это имя директории приложения(название без нижних подчеркиваний в камэлкейс, но можно с большой буквы).
# Устанавливаются все необходимое для работы приложения, гемы, инициализируется гит итд.


# Доп опции Рэилс 7 при создании приложения:

# > rails new name -T               -  создать новое Рэилс приложение без автотестов
# > rails new name --skip-hotwire   -  создать новое Рэилс приложение без hotwire

# Настройка ассетов для CSS   https://github.com/rails/cssbundling-rails:
# > rails new name --css bootstrap
# > rails new name --css tailwind
# > rails new name --css bulma
# > rails new name --css postcss
# > rails new name --css sass

# (В 6й и более ранних версиях пришлось бы добавлять bootstrap отдельно командой yarn add bootstrap)

#  Движки для ассетов JS:
# > rails new name -j esbuild
# > rails new name -j rollup
# > rails new name -j webpack
# > rails new name -j bun

# Примеры:
# > rails new AskIt -T --css bootstrap -j webpack --skip-hotwire      -  для курса Круковского
# > rails new app_name -j esbuild -c bootstrap d postgresql -T        -  вариант с PostgreSQL


# В итоге появляется папка с выбранным именем, она содержит следующие стартовые папки и фаилы(тут f - фаил, d - папка):
# f .git
# d app              -  содержит основной код приложения в директориях: views, models, controllers итд
# d bin              -  бинарные фаилы зафиксированные на версии(rails запустит приложение в той версии на которой оно создано)
# d config           -  конфигурация содержит, например:
#     d enviroments  -  настройки для каждого из 3х видов окружения(development.rb, test.rb и production.rb)
#     f boot.rb
#     f routes.rb    -  фаил для установки маршрутов
# d db
# d lib              -  дополнительные фаилы
# d log              -  журналы событий
# d public           -  публичные фаилы передаваемые напрямую минуя приложение, просто в ответ на запрос
# d storage          -  все что связано с актив сторэдж
# d test
# d tmp
# d vendor           -  сейчас уже особо не используется
# f .gitattributes
# f .gitignore
# f .ruby-version
# f config.ru
# f Gemfile
# f Gemfile.lock
# f Rakefile
# f README.md



puts '                                      Подключение UJS в Рэилс 7'

# Можно подключить UJS в Рэилс 7, если нужно. (Из курса Круковского делаем последовательно):
# 1. package.json (содержит библиотеки для фронтэнда) добавим строки:
"@rails/ujs": "^6.0.0"
"turbolinks": "^5.2.0" # для более быстрой загрузки страниц при переходе по ссылкам
# 2. > yarn install                  - переинсталируем после предыдущего пункта
# 3. app/javascript/application.js   - вносим изменения(они там и описаны)

# data-some_name - кастомные атрибуты(например data-method="delete") нужны для того чтобы мы могли создать собственные атрибуты(some_name - на выбор). html-валидатор будет знать что это кастомный атрибут, браузер их не обрабатыает
# Файл turbolinks через скрипт обрабатывает атрибуты data-* встречающиеся в коде html

# yarn: Можно дополнительно установить компонет popperjs, он нужен для того чтобы правильно позиционировать выпадающие списки(дропдауны), он есть в Бутстрапе, но там тоже зависит от popperjs
# > yarn add @popperjs/core
# далее добавим/импортируем этот компонент в app/javascript/application.js



puts '                                    Запуск бандла. Ошибки Windows'

# 1. На Виндоус(64) в Рэилс 7 с Руби версий 3.1(?? и выше), тк эти версии сообщают новую версию платформы, которая не распознвается в бандлере. По умодлчанию будет выдавать ошибку таймзоны 'tzinfo-data is not present', нужно изменить в Gemfile:
gem "tzinfo-data", platforms: %i[ mingw mswin x64_mingw jruby ]   # удаляем тут хэш доп настроек ...
gem 'tzinfo-data'                                                 # ... сохраняем так
# > gem uninstall tzinfo-data   # мб это необязательно и просто bundle install хватит ??
# > bundle install              # либо ...
# > bundle update               # ... лучше тк можно не использовать gem uninstall tzinfo-data ??

# 2. Могут быть проблемы в Виндоус, если запустить приложение в PowerShell или Git Bash, тк у них проблемы с регистром(не воспринимают заглавные), потому нужно прописать вручную либо использовать классическую командную строку
# https://discuss.rubyonrails.org/t/getting-started-with-rails-no-template-for-interactive-request/76162

# 3. (Не делал, от айтипрогер)Можно в гемфаил заменить в строке source "https://rubygems.org" https на http на время разработктки, тк корректнее для локального сервера ??


# Установка гемов только для определенных режимов:
# > bundle install --without production         - установит только те гемы, которые в Gemfile не обернуты в группу продакшн



puts '                                    Запуск сервера. Режимы запуска'

# Запуск сервера приложения
# (запускаем в основной папке приложения, если хотим запустить на последней версии Рэилс из установленных)
# (запускаем из директоррии appname/bin, чтобы запустить на той версии Рэилс на которой приложение было созданно)
# > rails server           - запуск в текущей консоли
# > rails s
# > start rails server     - запуск в новом окне консоли
# > start rails s

# запускает веб-сервер Puma
# Далее запускается Рэилс-сервер, среди прочего он говорит, что запускается на порту, например 3000(http://127.0.0.1:3000/)
# http://localhost:3000/  -  адрес для открытия Рэилс приложений

# Последовательность того как начинает работу rails-приложение, когда его запускаешь:
# boot.rb -> rails -> environment.rb(подгружается) -> development.rb или test.rb или production.rb(подгружается окружение)


# Rails-приложение по умолчанию может запускаться в 3 разных типах окружения(режимах):
# 1. development    - оптимизирует среду для удобства разработки, будет работать чуть медленнее.
# 2. test           - для тестирования
# 3. production     - запускает только то, что нужно для работы приложения, работает максимально быстро
# Для каждого типа окружения существует своя отдельная БД

# Запуск окружения (development, test, production) через ключ -e (enviroment/окружение). По умолчанию окружение development
# > rails s -e development
# > rails s -e test
# > rails s -e production

# Можно создавать и собственные среды



puts '                           Запуск сервера с доп инструментами для JS ассетов'

# Для запуска приложения с дополнительными инструментами для JS ассетов, например вебпакером, ESBuild итд - не подойдет стандартный вариает, тк надо запустить, например вебпакер и перекомпилировать наши scss каждый раз когда они меняются


# 1. На *nix-системах просто вводим в терминал:
# $ bin\dev
# и сервер запустится (берет инструции из этого фаила bin\dev сам)


# 2. На Винде надо, зайти в bin\dev и либо просто копируем команду( foreman start -f Procfile.dev ) и запускаем ее в терминале, либо можно создать отдельный фаил, например st.cmd скопировать в него данную строку и запускать уже его:
# > st.cmd

# На Виндоус будет еще одна ошибка тк пытается использовать фаил bin\rails, но на виндоус это не работает.
# Нужно сделать изменения в фаиле Procfile.dev(он запускает: 1 Сервер Рэилс, 2 Компиляцию JS, 3 Компиляция для CSS).
web: env RUBY_DEBUG_OPEN=true bin/rails server      # меняем эту(1ю) строку(отвечающую за запуск сервера Рэилс)
web: ruby bin/rails server                          # на эту
web: ruby bin/rails server env RUBY_DEBUG_OPEN=true # ( ?? или на эту проверить ?? )
web: ruby bin/rails server -p 3000                  # можно дополнительно указать порт, по которму будет открываться сервер



puts '                                             Ошибки разное'

# 0. Если чтото не работает сперва перезапустить Рэилс сервер приложения

# 1. tmp\pids\server.pid
# Автоматически удаляется когда закрываем сервер, но если что-то пошло не так и он не удалился, то сервер может перестать запускаться, тогда этот фаил нужно удалить вручную

# 2. На Винде при старте проекта или при различных манипуляциях, например при обновленни версии в фаилы bin/rails, bin/rake и bin/setup в первую закоментированную строку в конце может добавляться расширение .exe, его нужно удалить, тк могут возникнуть проблемы при развертывании приложения в продакшене
#!/usr/bin/env ruby.exe   - так быть не должно
#!/usr/bin/env ruby       - так быть должно



puts '                                            Отладочный вывод'

# В консоли выходит инфа о запросе, контроллере его обрабатывающем и том какие представления рэндерятся:
# Started GET "/" for ::1 at 2023-10-16 12:19:23 +0300
# 12:19:23 web.1  | Processing by PagesController#index as HTML
# 12:19:23 web.1  |   Rendering layout layouts/application.html.erb
# 12:19:23 web.1  |   Rendering pages/index.html.erb within layouts/application
# 12:19:23 web.1  |   Rendered pages/index.html.erb within layouts/application (Duration: 20.8ms | Allocations: 159)
# 12:19:23 web.1  |   Rendered layout layouts/application.html.erb (Duration: 35.5ms | Allocations: 3676)
# 12:19:23 web.1  | Completed 200 OK in 51ms (Views: 47.1ms | ActiveRecord: 0.0ms | Allocations: 4556)














#

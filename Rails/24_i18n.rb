puts '                          Перевод, интернационализация, локализация (i18n, l10n)'

# (?? как варик переводов + для Синатры (без yml) ??) - можно создавать отдельные виды для каждого языка и возвращать их в соответсвии с тем какой язык выбрал пользователь(выбранный язык хранится например в таблице users)
# some.ru.html.erb - в название фаила вида добавляем расширение с обозначением языка (тут ru)

# Можно разнести представления на отдельные для каждого языка (локализированные представления)

# Локализированные представления - это представления, которые содержат код локали (ru, en) перед расширениями. Эти локализированные представления автоматически подтянутся, в представлениях нужно только добавить локаль в ссылку, чтобы при переходе по ней язык остался тем же.

# locale: :en - добавим локаль в хелпер URL в ссылку, тогда ссылка вызовет представление с определенным переводом.
edit_password_reset_url(locale: :en)



puts '                                     i18n(internationalization)'

# Желательно вносить переводы в yml сразу, когда пишем элементы которые будем потом переводить, чтобы потом не забыть

# https://guides.rubyonrails.org/i18n.html
# http://rusrails.ru/i18n

# https://www.youtube.com/watch?v=6NknL5u26Jw   - интернациолизация приложений для начинающих Круковский
# https://lokalise.com/blog/rails-i18n/         - статья Круковский
# https://www.youtube.com/watch?v=mwEHVNZ1VLM   - урок Круковский
# 27-20 - Где брать переводы. Система(сайт с переводчиками) управления переводами Lokalise


# i18n == internationalization - i далее 18 букв и последняя n. Интернационализация существует в Rails по умолчанию, при помощи нее можно не беспокоиться о регистрах в представлениях, а так же переводах на другие языки

# Все наши строки переводов будут находиться в отдельных фаилах yml в директоии config/locales, а в представлениях будут заглушки обозначающие их и при рэндере страницы, строка перевода будет подставлена на место заглушки в зависимости от выбранной пользователем локали(например, для русского языка можно создать /config/locales/ru.yml)

# Работа с i18n (internationalization):
# 1. Создадим в фаиле /config/locales/en.yml раздел, например contacts с подразделом и строковым значением перевода:
# 2. Вызовем в представлении, например /app/views/contacts/new.html.erb: <h2><%= t('contacts.contact_us') %></h2>

# Devise i18n:
# config/locales/devise.en.yml


# Доп технологии:
# гем i18n-tasks там скрипты для проверки отсутсвия ключей, дублей, рассинхрона переменных и.т.д.
# если надо будет данные в базе переводить, то mobility


# В Gemfile можно(рекомедуется, далее используется) подключить гем для наиболее типичных переводов, чтобы не прописывать в ручную: название месяцев, дней недели, валют, типичные ошибки валидации итд.
# https://github.com/svenfuchs/rails-i18n (переводы можно посмотреть в директории гема rails/locale)
gem 'rails-i18n', '~> 7'
# > bundle install


puts
puts '                                      Структура и правила каталогов'

# Не может быть 2х ключей(каталогов) с одним и тем же именем на одном и том же уровне вложенности, одного и того же надкаталога

# Можем создавать любые каталоги(это как пространства имен) с любой структурой и по любым обобщениям которые нам нужны (например по представлениям, по темам, по фичам итд)
# Удобно формировать каталоги согласно файловой структуре приложения, чтобы использовать краткую форму записи в видах


# Перевод названий моделей - некоторые хэлперы могут его использовать по умолчанию и выводить в представления, например на кнопке формы submit
'activerecord:
   models:
     model_name: Перевод имени модели'
# 1е два каталога неизменяемы, 3е название модели(в единственном числе)


# Каталоги для названий столбцов из БД(по умолчанию используются в ошибках валидации, формах и других местах например в своем выводе этих названий), в yml будут иметь структуру:
'activerecord:
   attributes:
     model_name:
       col_name: Перевод имени столбца'
# 1е два каталога неизменяемы, 3е название модели(в единственном числе) и 4е название столбца для которого делаем перевод, названия будут такими же как в schema.rb


# Для перевода текста включающего теги, чтобы эти теги обрабатывались как теги а не как простой текст, необходимо в названии ключа(каталога) указать постфикс html
'some_html: Какойто перевод с <b>разметкой</b> внутри'


# интерполяция в переводы
'some:
  posted_by: "Posted by %{author}"' # %{author} интерполирует значение(тут имя автора) из переменной заданной в виде
# В виде зададим переменную для интерполяции:
<%= t('some.posted_by', author: @some.author) %>
# author: @some.author тоесть передаем имя автора в переменную для последующей интерполяции


# Работа со множественным числом в разных языках на примере сообщения об ошибках (правила уже созданы в геме rails-i18n, нужно создать правильные ключи для каждого языка)
# en.yml
'global:
   forms:
     messages:
       errors:
         one: "One error!"
         other: "%{count} errors!"' # %{count} интерполирует значение(тут числа ошибок) из переменной заданной в виде
# ru.eml
'global:
   forms:
     messages:
       errors:
         one: "Найдена одна ошибка!"
         few: "Найдены %{count} ошибки!"
         many: "Найдено %{count} ошибок!"
         other: "Найдена %{count} ошибка!"'
# В виде зададим переменную для интерполяции
<%= t('global.forms.messages.errors', count: some_model.errors.count) %>
# count: some_model.errors.count тоесть передаем число ошибок и в зависимости от него гем rails-i18n выберет правильный вывод


# Создание части пути в переменной, чтобы не дублировать пример в admin/users/index.html.erb
scope = 'activerecord.attributes.user' # переменная для того чтобы не дублировать путь к переводу
t 'name', scope: scope  # scope: scope - берем эту переменную и добавляем к ней '.name'


# Перевод флэш сообщений.
# Можно создать глобальный раздел для флэш сообщений, но тогда будет для всех сущностей одно и тоже и придется в плэйсхолдере писать полный путь
'flash:
  success: Some deleted!'
# Либо просто прописывыем каталог соотв папки видов(контроллера) и ключ сообщения(тут success)
'questions:
   destroy:
     success: Question deleted!'
# Далее просто ставим в контроллере questions_controller.rb плэйсхолдер
def destroy
  @question.destroy
  flash[:success] = t('.success')
  redirect_to questions_path
end


puts
puts '                                      Методы и их использование'

# Наиболее важными методами I18n API являются:
translate('some_catalog_name') # Ищет перевод текстов в указанном разделе
t('some_catalog_name')         # псевдоним translate
I18n.t 'store.title'
localize('some_catalog_name')  # Локализует объекты даты и времени в форматы локали
l('some_catalog_name')         # псевдоним localize
I18n.l Time.now

# Также имеются методы чтения и записи для следующих атрибутов:
load_path                 # Анонсировать ваши пользовательские файлы с переводом
locale                    # Получить или установить(через =) текущую локаль (значения это :en, :ru итд)
default_locale            # Получить или установить(через =) локаль по умолчанию
available_locales         # Разрешенные локали(массив ??), доступные приложению
enforce_available_locales # Принуждение к разрешенным локалям (true или false)
exception_handler         # Использовать иной exception_handler
backend                   # Использовать иной бэкенд


# В Рэилс при соответствии маршрута разделов в yml и последовательности каталогов в приложении(контроллер.представление.ключ для вида, либо контроллер.экшен.ключ для экшена в контроллере например перевод флэш сообщений) то вместо этой полной последовательности:
<%= t('home.index.title') %> # тут home - директория с представлением(имя контроллера), а index - представление
# .. можно писать в представлении сокращенно так:
<%= t('.title') %>


# Пример i18n в представлении
# Посмотрим в представлении на примере вида pages/index.html.erb
# подставим в /config/locales/en.yml значения для заглушек
# создадим фаил /config/locales/ru.yml и зададим там значения уже для русского


# Пример локализации(форматирования) даты и времени l10n для разных локалей с использованием гема rails-i18n.
# Изменим метод декоратора formatted_created_at в decorators/question_decorator.rb
class QuestionDecorator < ApplicationDecorator
  delegate_all

  def formatted_created_at
    # Было: форматировали в ручную при помощи метода strftime
    created_at.strftime('%Y-%m-%d %H:%M:%S')

    # Изменим на:
    l created_at, format: :long
    # format: :long   -   возято отсюда https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ru.yml в самом конце есть форматы времени для локализации
    # Вместо :long можно записать и его значение оттудаже "%d %B %Y, %H:%M"
    # 10 ноября 2023, 10:35  - результат будет такой, причем имя месяца берется оттуда же тоесть из гема rails-i18n
  end
end


# Перевод элементов пагинации от Pagy
# Открываем config/initializers/pagy.rb и раскомментируем там строку:
require 'pagy/extras/i18n'
# У Pagy есть и своя реализация i18n, но в случае Рэилс и свой встроенный норм


puts
puts '                                     Переключение языков. Настройка'

# 1. Настройка в фаиле config/application.rb:
module Blog2 # Blog2 - просто название проекта
  class Application < Rails::Application
    # ...

    # Зададим все локали(фаилы yml, обозначающие например языки), которые мы хотим поддерживать
    config.i18n.available_locales = %i[en ru] # (маленькая i в i18n)
    # Нужно сделать переводы на все указанные тут языки, иначе если переключиться, а перевода нет, то вместо языка по умолчанию может быть название плэйсхолдера или тега.

    # Так же можно тут поставить временную зону (прописано в комментарии по умолчанию)

    # Установим локаль по умолчанию
    config.i18n.default_locale = :en # при ручном изменении параметра(:en) тут, тоже можно переключать язык

    # ...
  end
end
# перезагрузить рэилс сервер


# 2. Рекомендуется установить кодировку и отобразить текущий установленный языковой стандарт в лэйаут
'<head lang="<%= I18n.locale %>">'
'<meta charset="utf-8">'


# 3. Настройка маршрутов для переключения языков пользоавтелем
# Задача в том чтобы адрес мог содержать как наши локали(localhost:3000/en/posts или localhost:3000/ru/posts) так и был адрес без локали, в котором будет локаль по умолчанию(localhost:3000/posts)
Rails.application.routes.draw do
  # оборачиваем все маршруты, представления для которых будут садержать переводы, в scope:
  scope "(:locale)", locale: /#{I18n.available_locales.join('|')}/ do
  # (:locale) - название элемента локали в маршруте, скобки значат что локаль(/en/) в маршруте не обязательна
  # locale: /#{I18n.available_locales.join('|')}/  - аргумет с регуляркой, который проверяет что язык в URL адресе запроса :locale исключительно из тех что мы прописали в кофиг( %i[en ru] )

    # все наши маршруты будут внутри данного scope

  end
end


# 4. Фильтр для считывания локали из URL каждого запроса для экшенов(экшены теперь должны обрабатывать новые маршруты c локалью языка), для дальнейшего подключения нужного языка в возвращаемые этим экшеном представления.
# Добавляются в ApplicationController, а остальные наследуют
class ApplicationController < ActionController::Base # в следующем разделе вынесем в консерн
  around_action :switch_locale # те назначаем локаль при работе любого экшена, любого контроллера

  protected

  def switch_locale(&action) # &action - обязательный парамер, это действие(экшен) контроллера(блок со всем кодом из соотв экшена ??), которое необходимо выполнить
    locale = locale_from_url || I18n.default_locale
    # locale_from_url - подметод(ниже) чтобы взять локаль из URL запроса, что мы настроили в маршрутах "(:locale)"
    # I18n.default_locale - либо если локали в URL запроса нет то используем локаль по умолчанию заданную в конфиге
    I18n.with_locale locale, &action # 1й аргумент это переменная локали, 2й экшен контроллера в виде блока
    # with_locale - метод который говорит что действие контроллера будет выполняться в контексте запрошенной локали(? тоесть в заглушки пропишутся значения из соответсвующего yml ?)
  end

  def locale_from_url
    locale = params[:locale] # локаль берем из URL запроса, что мы настроили в маршрутах ":locale"
    return locale if I18n.available_locales.map(&:to_s).include?(locale) # приводим к строке, тк params[:locale] возвращает строку, а в available_locales символы
    # Те возвращаем только если запрашивая локаль прописана в конфиге а иначе вернет nil
  end

  # Для того чтобы локаль, которая установлена на данный момент пристыковывалась к каждой ссылке по которой мы переходим, тоесть сохранялась между запросами, тоесть при переходе на другую страницу сохранялся выбранный язык
  def default_url_options # переопределяем встроенный метод Рэилс
    { locale: I18n.locale } # каждому URL, который сгенерин при помощи хэлперов, мы добавим текущую локаль
    # (!!! работает только при помощи ссылок-хэлперов link_to c хэлпером для URL, соотв создаем хэлперы для стат страниц !!!)
  end
end

# 4б. Для удобства вынесем код из материнского контроллера в консерн internationalization.rb
class ApplicationController < ActionController::Base
  include Internationalization # подключим консерн
end


# 5. Сделаем меню переключения языков в layouts/application.html.erb  или (AskIt) в shared/_menu.html.erb


puts
puts '                         Применение предпочитаемых языков пользователя из браузера'

# (!!! Почемуто не сработало переключение на предпочитаемый язык, мб у меня их 2 в браузере ??)

# (?? хз откуда это. настройки языка для пользователя можно либо в куки положить, либо в базе создать отдельный столбец в users)

# Когда бразер отправляет запрос на сервер, то в заголовках запроса есть данные о предпочитаемой пользователем локали
# Посмотреть у себя предпочитаемый язык - в консоли разработчика: Network -> наш адрес из списка Name -> Headers -> Accept-Language
# Мы будем считывать это из браузера и если в URL не стоит локаль, то выберет предпочитаемую из заголовка если она есть

# Для считывания заголовка с предпочитаемой локалью используем подход/код отсюда
# https://github.com/rack/rack-contrib/blob/main/lib/rack/contrib/locale.rb
# но сам гем использовать не будем а просто позаимствуем часть кода и добавим его в консерн internationalization.rb







puts
puts '                                        Потом для дополнения(старое)'

class ApplicationController < ActionController::Base
  around_action :switch_locale # Почемуто с  у меня пустую страницу открывает, а с before_action все норм работает
  # Тут проблема в том, что надо сменить локаль, а потом вернуть исходную. Можно и c before_action сделать, но тогда в after_action надо установить другую, иначе новый запрос на тот же процесс получит локаль от последнего пользователя, а не дефолтную.
  # Скорее всего action в блок передается как-то неправильно

  before_action :switch_locale # фильтр установки языка

  protected

  def switch_locale
    # locale = current_user.try(:locale) || I18n.default_locale
    # I18n.with_locale(locale, &action)
    I18n.locale = 'ru' # жесткая установка(тут 'ru' это название фаила ru.yml ??)

    # или, если для каждого пользователя свой, то лучше сделать around_action в контроллере и использовать
    I18n.with_locale(/user_locale/) { action }
    # идея в то, что для каждого запроса локаль будет своя при таком подходе
  end
end





















#

puts '                                          Юнит-тесты'

# Юнит-тесты предназначены для тестирования отдельных модулей(в данном случае имеется ввиду каждая отдельная часть программы, которую уже нельзя/бессмысленно разбивать на более мелкие, эта часть и есть - юнит) программы.
# Не все ошибки можно определить автоматически, программа просто может работать но не правильно, чтобы не бояться таких скрытых ошибок при изменении программы и нужны юнит-тесты.
# Юнит тестирование нужно, чтобы при возрастании сложности приложения функциональность большого приложения сохранялась

# code/test coverage - покрытие кода тестами(измеряется в процентах, есть авт утилиты которые это считают)

# Тк Руби язык динамический то мы не узнаем об ошибке в той части кода которую не запускаем. В отличие от какого нить Си# языка со строгой типизацией, компилируемого - его программы перед запуском компидируются в исполняемый фаил (пр exe-фаил на винде) и если программа скомпилировалась то явных ошибок в ней нет, поэтому нужно меньше тестов(только критические учаски кода)

# Покрытие тестами уведичивают бюджет проекта

require "test/unit"

# Класс который нужно проверить
class Brokened
  def uh_oh
    "I needs fixing"
  end
end

# Класс теста для класса выше, этот класс и будет запускаться для проверки
class BrokenedTest < Test::Unit::TestCase
  def test_uh_oh # метод осуществляющий проверку(если будет несколько метов то они запустятся все)
    actual = Brokened.new # будем проверять метод экземпляра, потому создаем экземпляр
    assert_equal("I'm all better!", actual.uh_oh) # проверяем на соответсвие с эталонным значением
  end
end # Далее пример вывода(мне выдало более подробный)
#=> Started
#=> F
#=> Finished in 0.663831 seconds.
#=>
#=>   1) Failure:
#=> test_uh_oh:11
#=> <"I'm all better!"> expected but was
#=> <"I needs fixing">.
#=>
#=> 1 tests, 1 assertions, 1 failures, 0 errors   # тут assertions это вызовы - пр: assert_equal("I'm all better!", actual.uh_oh)



puts
# Интеграционное тестирование(Другой вид тестирования не юнит) - тестирование функциональности сайта со стороны браузера









#

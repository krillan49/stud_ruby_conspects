// Фаил для jS скриптов создаем в папке public(можно сделать и отдельную подпапку) например script.js и подключаем так <script src="/script.js"></script>

// Джаваскрипт можно подключать не только в отдельном фаиле но и просто в теле тега на отдельной html странице
// <script type="text/javascript">alert('hello');</script>

// Можно(по аналогии с css фаилами) подключать несколько фаилов js, например для отдельных плагинов(готоых скриптов) можно просто подключить их отдельно в разных js фаилах не парясь о добавлении в один.


//                                               JS

// Комментарии в JS

// Фронтэнд js-код выпоняется прямо в браузере

alert('hello'); //  выведет текст 'alert hello' на экран. В браузере при подключении этого js фаила 'hello' выведет в всплыв окне
// всплывающее окно alert каждый браузер выводит по разному. так что кастомизировать его хз как.

// ; (точка с запятой) - заверщает строку в JS, но не ставится после функций(?)

// функция в джаваскрипт. function - аналог def в Руби
function name() {
  // тело функции
}

// В JS функция вызывается по хэндлеру/событию(обработчик) Примеры в javascript.html

// функции из такого js фаила можно подключать в разные html если подключить фаил js в эти html
function something() {
  alert('iam function from js file');
}

// Переменная и фунция с переменной
var x = 1; // при перезагрузке страницы(соотв и при переходе на другие страницы) переменные инициализируются заново, те не сохраняются от станицы к странице(соотв счет начнется с 1 с каждой новой станицы)
function perx() {
  alert(x);    // будет выводиться на страницу возрастающие цифры одна за одной(так получился счетчик кликов на кнопку)
  x = x + 1;
}


//                                                 localstorage

// window.localStorage - это объект html5, он позволяет сохранять данные локально. Те браузер пользователя будет хранить у себя в памяти(те на компе пользователя) данные о сайте в котором вызван localstorage. При помощи спец инструметов мы можем смотреть эти данные в браузере пользователя и если нам нужно - отправлять их на сервер для обработки.

// Создается для каждого сайта отдельный, так что можно спокойно очищать

//  с точки зрения структуры данных localStorage это хэш

// Те например в инет магазине, когда пользователь работает с корзиной товаров, сервер с этим не взаимодействует и обращается к корзине когда пользователь делает определенное действие для этого

// Во многом похоже на куки(хром вроде даже считает это частью куки)

// Гуглхром ограничевает размер localstorage 5ю мегабайтами.

// Для сохранения значений между разными перезагруженными страницами и после закрытия браузера
// Это же можно сделать при помощи разных механизмов, но тут используем самый простой и надежный(localStorage) для примера. Он доступен в html5

// www.w3schools.com/html/html5_webstorage.asp    -    HTML5 Web Storage https
// https://habr.com/ru/articles/349164/   -   Почему не стоит использовать LocalStorage
// https://tproger.ru/articles/localstorage/   -   LocalStorage на пальцах
// https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage   -   window.localStorage - Web APIs | MDN


function localst() {
  // переменная заданная внутри метода, задается каждый раз заново
  var x = window.localStorage.getItem('score'); // это как hh['score'] в ruby. Получаем значение из localStorage по ключу(название ключа можно придумать любое) и передаем его в переменную.  До определения(при самом первом нажатии) будет возвращать null.

  // Когда мы получаем переменную из localStorage, то она получается типа String. А в JS в отличие от Руби если сложить строку и число то сложатся как 2 строки('1' + 1 == '11')
  // x * 1 - чтобы преобразовать String в Int в JS. ('523' * 1 == 523)

  x = x * 1 + 1;

  // помещаем новое значение переменной в localStorage
  window.localStorage.setItem('score', x); // это как hh['score'] = x в ruby. Передается 2 параметра 1й ключ, 2й значение.

  alert(x);
}
// Теперь данные о переменной x хранятся в памяти браузера пользователя и при следующем заходе на сайт(на любую страницу где вызывается этот метод, тк это общее значение для метода, соотв клики на разных страницах учитываются вместе) оно уже будет использоваться далее


// Разные функции localstorage
function prosto_dla_obertki() { // функция просто чтоб не срабатывало
  localStorage.clear();  // Очистить localStorage
  window.localStorage.length() // выведет число элементов в локалсторедж
  window.localStorage.key(0) // получаем по индексам ключей(??) локалсторедж собственно ключи
}

// Содержимое localstorage можно посмотреть в панели разработчика в Хроме, в разделе console(там где проверяем ошибки)(нажав энтер можно посмотреть его содержимое полностью):
// > localstorage  //=>Storage {product_1: '3', LS_W_ON_PAGE: '1670006288853', product_3: '4', product_2: '4', aaa: '55520', …}
// > localStorage.clear()   //=> Storage {length: 0}  // length - число элементов хэше локалсторедж



// Функция с параметром:
function addToCart(par) {
  alert('Your parametr is: ' + par);
}
// Если не ввести параметр при вызове всплывающее сообщение скажет  -  You added pizza with id: undefined



//                                           Разные функции JS

// Работу разных функций удобно проверять в консоли браузера(типа как терминал и irb для руби)

function lisiOfFuncs() {
  // Функчия находящая в строке индекс подстроки
  'product_dddggg'.indexOf('product_') //=> 0
  'product_dddggg'.indexOf('product_') == 0 //=> true
  'bbbbbaaa'.indexOf('aaa') //=> 5
  'aaa'.indexOf('aaacc') //=> -1   если строка не содержит подстроку
}













//

puts '                                         ООП: Module/namespace(Модули)'

# class Admin::UsersController < ApplicationController   синтаксис создания модуля сразу с созданием класса (проверить)


# Модуль/namespace/пространство имён — это способ группировки методов, классов и констант; своего рода новый уровень логического разделения программы после классов и методов. Модуль может содержать любое количество методов, классов и других модулей

# Модули дают преимущества:
# 1. Модули предоставляют пространство имен и предотвращают конфликты имен(В разные модули можно поместить константы и методы с одинаковыми именами и тогда они никак не будут конфликтовать в основном коде, примерно как положить фаилы с одинаковыми именами в разные папки)
# 2. Модули реализуют возможность миксина.
# 3. Модули позволяют удобно создавать набор методов.
# 4. Можно использовать для своей библиотеки, выбрав уникальное имя модуля(лучше придумать необычное, чтоб не попасть на такое же, можно проверить в поиске рубиджемс, тк обычно имена модулей и название гемов одинаковое)

# Обычно принято что именем модуля называют директорию в которой лежит фаил с модулем и классом, а имя этого фаила называют так же как класс

# Имена(константы) модуля записываются так же, как константы класса, с начальной прописной буквы. Методы модуля определяются точно так же, как методы класса.

# Предпочитайте модули классам содержащим только методы класса. Классы следует использовать только тогда, когда имеет смысл создавать из них экземпляры.


puts
puts '                Вызов методов и констант из модуля в текущую область видимости. Методы модуля'

# Методы записанные с префиксом или под module_function не могут запускаться без префикса модуля, в то время как записанные без префикса могут и так и так

module Amodule # Модуль создается при помощи ключевого слова module, название модуля с большой буквы
  # Константа
  PI = 3.14

  # Статические методы моджуля - название методов должно иметь префикс с именем модуля либо префикс self, аналогично методам класса. Эти методы будут методами модуля(вызываться от модуля)
  def Amodule.module_meth1(par)
    par - 1
  end
  def self.module_meth2(par)
    par - 5
  end

  # Стандартные методы модуля - перед вызовом метода нужно воспользоваться оператором вызова модуля "include Modulename"
  def somemeth(par)
    par + 1
  end

  module_function # module_function - ключевое слово, определяющее, нижестоящие методы методами(статическими) модуля.

  def shout(whatever)
    whatever.upcase
  end
end
# Константа/класс модуля вызывается аналогично тому как вызывается константа класса, через :: это значит, что внутри модуля нужно найти(вызвать из модуля) константу с этим названием
p Amodule::PI #=> 3.14

# 1. Вызов статических методов модуля из модуля может осуществляться без подключения через include
p Amodule.module_meth1(5) #=> 4
p Amodule.module_meth2(20) #=> 15
p module_meth2(20) #=> 15  # undefined method `module_meth2' for main:Object (NoMethodError)
p Amodule.shout('Hello') #=> "HELLO"  # метод является методом модуля тк стоит ниже module_function
p shout('Hello') #=> "HELLO" # undefined method `shout' for main:Object (NoMethodError)

# 2. Вызов стандартных методов модуля - необходимо использовать include
p Amodule.somemeth(5) #=> undefined method `somemeth' for Amodule:Module (NoMethodError)
# Для того чтобы методы вызывались подключим модуль в этом фаиле:
include Amodule # !!! модуль подключается в области ниже этой строки но не выше
# Теперь мы можем вызвать метод не содкржащий префикса с именем модуля
p Amodule.somemeth(Amodule::PI + 7) #=> 11.14  # Вызов метода модуля с помещением константы в параметр
# В том числе и без указания префикса если нет конфликта имен
p somemeth(Amodule::PI + 7) #=> 11.14  # Вызов метода модуля с помещением константы в параметр
# Методы с префиксом нельзя без него вызвать и при подключенном модуле
p module_meth1(5) #=> undefined method `module_meth1' for main:Object (NoMethodError)
p PI # если модуль подключен то можем вызвать константу/класс без Amodule::


puts
puts '                                   Пространство имен. Конфликты имен'

# Мы можем определить еще один модуль с тем же именами функции, что и у модуля выше, но с другой функциональностью и конфликта в программе не возникнет изза того что этот метод будет методом другого модуля:
module Bmodule
  PI = 5
  def Bmodule.module_meth1(par)
    par + 10
  end
  def somemeth(par)
    par + 11
  end
end
p Bmodule::PI #=> 5   # Не возникает конфлика при вызове констант с одинаковым именем и разными значениями из разных модулей
p Bmodule.module_meth1(Amodule::PI/4) #=> 10.785    # Используем константу одного модуля в методе другого
p PI #=> 3.14   вызвалась константа модуля Amodule, тк он подключен а Bmodule нет
p somemeth(1) #=> 2   вызвался метод модуля Amodule, тк он подключен а Bmodule нет
include Bmodule
p PI #=> вызвалась константа модуля Bmodule, видимо потому что он бы подключен познее и переопределил константу для этой области
p somemeth(1) #=> 12   вызвался метод модуля Bmodule так же как с константой


puts
puts '                                           include и extend'

# include и extend - операторы подключения модуля по его константе, переданной как параметр, в ту область видимости в которой записано, тоесть все содержимое модуля как бы копируется в эту область видимости. При подключении вне класса работают одинаково, но различаются пр подключении в класс.

module Some # подключаемый модуль
  def meth
    'aaa'
  end
end

# include - при подключении через него в класс, стандартные метоы модуля подключаются как методы экземпляра этого класса
class Bbb
  include Some
end
p Bbb.meth     #=> undefined method `meth' for Bbb:Class (NoMethodError)
p Bbb.new.meth #=> "aaa"


# extend - при подключении через него в класс, стандартные метоы модуля подключаются как статические методы класса этого класса
class Aaa
  extend Some
end
p Aaa.meth     #=> 'aaa'
p Aaa.new.meth #=> undefined method `meth' for #<Aaa:0x0000021d059099e8> (NoMethodError)


# include и extend можно подключить в рамках одного класса, тогда создаст и методы экземпляра и методы класса, но обычно так не делают


puts
puts '                       require и require_relative(подключение модуля из другого фаила)'

# Желательный подход - 1 фаил для одного модуля/класса

# Создаем для модуля новый фаил(31_tools.rb) и создаем в нем модуль

# require и require_relative - операторы загружающие фаил как бы прописывают код из него(например модуль) в этой точке


# require_relative - загружает/подключает файл с указанным путём относительно местоположения/директории текущего файла
require_relative "31_tools" # "Подключение" фаила. Если  подключаемый фаил и данный фаил в одной папке то путь не прописываем, а иначе необходимо указывать путь
Tools.say_hello("George") #=> "Hi, George"
include Tools # подключаем теперь сам модуль
say_bye("Вася") #=> 'Bye, Вася'


# require - ключевое слово для подключения фаила, оно использует для загрузки набор каталогов, заданных настройками среды и параметрами запуска интерпретатора
require './main/31_tools' #=> .rb писать необязательно
# './' - текущая директория и далее путь к этому фаилу
# Можно подключить "$LOAD_PATH << '.'" чтобы искать фаилы в текущем каталоге
BB.say_hi #=> "hi"
include BB
say_bye_bye() #=> "Bye bye"


puts
puts '                                           Классы из модулей'

# Если подключить одинаковые константы из модуля при помощи include, то будет применяться последняя, тк она получится записанной позже и переопределит предыдущую. Потому в этом случае лучше использовать синтаксис "::"

module Humans
	class JessiePinkman # классов в модуле может быть сколько угодно.
		def say_hi
			'hello'
		end
	end
end
module Dillers
	class JessiePinkman # классов в модуле может быть сколько угодно.
		def say_hi
			'hi, bitch'
		end
	end
end
# ::  - Синтаксис обращения к классу через модуль аналогичен синтаксису обращения к констант, это значит, что внутри модуля нужно найти(вызвать из модуля) константу с этим названием
jessie_pinkman = Humans::JessiePinkman.new
jessie_pinkman2 = Dillers::JessiePinkman.new
# Теперь объекты классов будут обращаться к своим отдельным методам
p jessie_pinkman.say_hi #=> "hello"
p jessie_pinkman2.say_hi #=> "hi, bitch"


puts
puts '                                        Подключение модуля в класс'

# Удобно как альтернатива наследованию, если есть классы в которох будет совсем немного общего функционала или классы, которые уже наследуют у какихто классов и в них надо добавить функционал

# Подключение модуля в класс вне тела класса
Array.include SelfInject


# Чтобы встроить модуль в класс, используется оператор include в теле класса:
module Week
  FIRST_DAY = "Sunday"
  def Week.weeks_in_month
    puts "You have four weeks in a month"
  end
  def Week.weeks_in_6_month
    puts "You have 26 weeks in a month"
  end
  def weeks_in_year
    puts "You have 52 weeks in a year"
  end
end

class Decade
  include Week # Подключаем модуль в теле класса, теперь все что содержит модуль доступно в классе

  def no_of_months
    puts "120 months from #{FIRST_DAY}" # Константа модуля вызвана в методе класса
  end
  def weeks_in_month  # Так можно вызвать метод модуля от объекта
    Week.weeks_in_month
  end
end
d1 = Decade.new
# Константу можно вызвать и от модуля и от класса в который он подключен:
p Week::FIRST_DAY #=> "Sunday"
p Decade::FIRST_DAY #=> "Sunday"
# Метод класса с подключенной константой модуля:
d1.no_of_months #=> "120 months from Sunday"

# Вызов методов от объекта(методы модуля без префикса имени модуля при подключении в класс работают как методы класса):
d1.weeks_in_year #=> "You have 52 weeks in a year"
# Метод модуля с префиксом нельзя вызвать от объекта класса или как метод класса, а можно только от модуля
d1.weeks_in_6_month #=> undefined method `weeks_in_6_month' for #<Decade:0x000001f507519660> (NoMethodError)
Decade.weeks_in_6_month #=> undefined method `weeks_in_6_month' for Decade:Class (NoMethodError)
# Чтобы вызвать такой метод из объекта нужно будет поместить Week.weeks_in_month в метод класса
d1.weeks_in_month #=> You have four weeks in a month


puts
# В модуль можно помещать attr_ ... и конструктор и подключить их потом в класс
module MyModule
  attr_accessor :x

  def initialize(options = {})
    @x = options[:x] || 0
  end

  def right
    self.x += 1
  end
  def left
    self.x -= 1
  end
end

class Dog
  include MyModule # Теперь класс получает все методы, конструктор и атрибуты из модуля

  def left # Можно переопределить методы модуля для данного класса
  end

  def label # Собственный метод
    '@'
  end
end

dog = Dog.new x: 10
# Используем атрибуты и конструктор из модуля
p dog.x #=> 10
p dog.x = 7 #=> 7
# Используем методы из модуля
p dog.right #=> 8
p dog.left #=> nil # Метод переопределен в классе и значение переменной y не меняется
p dog.x #=> 8  # Значение y осталось прежним


puts
puts '                                        Наследование класса из модуля'

# Наследуем у класса Base из модуля ActiveRecord
class Client < ActiveRecord::Base
end


puts
puts '                                  Mix-ins/Примеси(Подключение 2+ модуля в класс)'

# Миксины в значительной степени устраняют необходимость в множественном наследовании, которое не поддерживается Руби

# Класс Sample может одновремено испльзовать методы из модулей A и B, соответсвенно можно сказать, что класс Sample показывает множественное наследование или примесь:
module A
  def a1
    puts 'a1'
  end
end

module B
  def b1
    puts 'b1'
  end
end

class Sample
  include A # Подключаем 1й модуль в класс
  include B # Подключаем 2й модуль в класс
  def s1
    puts 's1'
  end
end

samp = Sample.new
samp.a1 #=> "a1"  # Вызов объектом метода из модуля A
samp.b1 #=> "b1"  # Вызов объектом метода из модуля B
samp.s1 #=> "s1"













#

puts '                                        Set. Набор ключей'

# https://ruby-doc.org/stdlib-3.0.2/libdoc/set/rdoc/Set.html

# Set (HashSet) - структура данных, работающая как хэш, но содержит только ключи, котрые и являются значениями, вместо пар ключ-значение. Значения сета уникальны и не повторяются, так же как ключи в хэше

# импортируем пространство имен, т.к. set не определен в пространстве имен по-умолчанию
require 'set'

# Инициализация
set = Set.new #=> #<Set: {}>

# конвертирование массива в сет
nodes = ['server1','server1','server2']
nodes.to_set # #<Set: {"server1", "server2"}>

# Число элементов в set
set.size #=> 0

# добавить значение в set
set.add(1) #=> #<Set: {1}>

# добавить множество элементов сразу в сет параметр энуменатор
set.merge(enum)

# удалить 1 элемент из сета
set.delete(n)

# вычитание сетов
[1,2,3,4,5].to_set - [1,2,3,5].to_set #=> #<Set: {4}>



puts '                                        Примеры использования'

# Нужно определить все ли буквы английского языка используются в этом тексте. В сете не может быть дублированных значений, то максимальное количество значений будет 26 (количество букв английского алфавита). Если количество букв 26, то все буквы были использованы.
str = 'quick brown fox jumps over the lazy dog'
def f(str)
  set = Set.new
  str.each_char do |c|
    set.add(c) if c >= 'a' && c <= 'z' # только если символ между a и z (игнорируем пробелы и все остальное)
		break if set.size >= 26
  end
  set.size == 26
end
puts f(str) #=> true  # в этом предложении используются все буквы англ. алфавита
# Если строка довольно большая, а распределение символов равномерно, то вероятность того, что все символы встретятся где-то вначале очень высока. Поэтому проверка на размер HashSet довольно полезна и в теории должна сэкономить вычислительные ресурсы.




















#

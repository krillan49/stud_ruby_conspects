puts '                                    Типы данных / Классы объектов'

# В Ruby всё является объектом (экземпляром класса `Object` или его подкласса), включая числа, строки и даже `nil`


puts '                                       Fixnum, Bignum, Integer'

# Целые числа делятся на:
# Fixnum от -2³⁰ до 2³⁰ - занимают меньше памяти(4 байта?) и быстрее работают
# Bignum от 2³⁰ и больше. Может хранить в себе целые числа вообще любого размера, если для них хватит места в оперативной памяти.
12345678901234567890 # Bignum

# Integer - класс целые числа подтип Fixnum
int = 15
p int #=> 15

# Запись десятичного числа (без учёта знаков «плюс» и «минус») должна начинаться с цифры от 1 до 9.
# Целое число, которое начинается с нуля, считается восьмеричным.
# Целое число с префиксом «0x» — шестнадцатеричное, «0b» — двоичное;
# Эти приставки только обозначают в каком исчислении число, а само число идет после неею
p 123       #=> 123     # десятичное Fixnum decimal
p 1_234     #=> 1234    # десятичное Fixnum с "_" для визуала
p -500      #=> -500    # отрицательное Fixnum
p 0377      #=> 255     # 8-ричное
p 0xff      #=> 255     # 16-ричное
p 0b1001    #=> 9       # двоичное

# перевод других типов в Integer
some.to_i

# Integer методы
2.even? #=> true (четный?)
2.odd? #=> false (нечетный?)

# параметр - система исчисления, потом раскладывается соотв число
12345.digits      #=> [5, 4, 3, 2, 1]
12345.digits(7)   #=> [4, 6, 6, 0, 5]
12345.digits(100) #=> [45, 23, 1]


# Integer(value.to_s) и value.to_s.to_i оба приводят значение к целому числу, но отличаются по поведению:
#                                      Integer(value)      value.to_i
# Бросает исключение, если не число    Да (ArgumentError)  Нет (возвращает 0)
# Обрабатывает только валидную строку  Да (строго)         Нет (пытается вытащить цифры в начале)
# Подходит для валидации               Лучше               Нет
# Пример "12abc"                       ArgumentError       12
# Пример "abc"                         ArgumentError       0

# Примеры:
Integer("123abc") #=> ArgumentError (invalid value for Integer(): "123abc")
"123abc".to_i     #=> 123

Integer("abc")    #=> ArgumentError (invalid value for Integer(): "abc")
"abc".to_i        #=> 0

nil.to_i          #=> 0



puts '                                             Float'

# Float(плавающий) - числа с плавающей точкой(4 байта?)
flo = 14.5
p flo #=> 14.5

p 123.4                #=> 123.4             # floating point value
p 1.0e6                #=> 1000000.0         # scientific notation/научная нотация
p 4E10                 #=> 40000000000.0     # 4 * 10**10   e может быть в любом регистре # dot not required
p 4e20                 #=> 4.0e+20           # если слишком много нулей то выводится в такой форме
p 4e+20                #=> 4.0e+20           # можно указывать знак
p 3e-3                 #=> 0.003             # 3 * 10**-3
p 3e-20                #=> 3.0e-20

# Перевод других типов во Float
some.to_f



puts '                                         Другие числовые типы'

# Rational (рациональные числа) и Complex (комплексные числа с мнимой единицей).



puts '                              TrueClass, FalseClass. Логический тип данных'

# В Руби нет единого типа данных Boolean. Есть тип TrueClass и есть FalseClass. Принимают только true или же false. (1 байт)
bool = false
p bool #=> false

p 5 > 3 #=> true

res = 5 == 3
p res #=> false

# switch false-true
a = false
b = !a
p b #=> true

# Двойное отрицание возвращает действительность объекта
!![] #=> true

# присваиваем результат условия в переменную
num = 5
fizz = (num % 3 == 0)
p fizz #=> false



puts '                                             NilClass'

# Тип данных Nil - пустое значение переменной
# nil - ничто, пустой объект

n = nil
puts n #=>
p n #=> nil

p nil.nil?   #=> true
p nil.class  #=> NilClass
p nil.to_i   #=> 0
p nil.to_s   #=> ""



puts '                                             String'

# String - строки. Последовательность(массив) байтов в кодировке UTF-8, могут быть любой длины.
str = "Скопец чтоли?"
p str #=> Скопец чтоли?

# Перевод других типов в String
some.to_s



puts '                                           Другие типы'

# Array [...] - тип данных массивы
# Hash {...} - тип данных хэши



puts '                                      Методы class, is_a и methods'

# is_a? (псевдоним kind_of?) - метод проверяет, является ли объект экземпляром данного класса *или его подкласса*
123.is_a?(Integer)     #=> true
123.is_a?(String)      #=> false
123.is_a?(Object)      #=> true
"blabla".is_a?(Object) #=> true

# instance_of? - метод проверяет только на *точное* соответствие классу
"строка".instance_of?(String) #=> true
"строка".instance_of?(Object) #=> false

# class - метод проверки типа данных объекта(принадлежности к классу), возвращает константу класса
2.class              #=> integer
"2".class            #=> string
2.0.class            #=> float

# superclass - метод проверки накласса от константы класса, возвращает константу надкласса
String.superclass             #=> Object
5.class                       #=> Integer
5.class.superclass            #=> Numeric
5.class.superclass.superclass #=> Object

# methods - метод, который отображает все методы экземпляра, которые можно применить к этому объекту (этого класса)
"x".methods  # Выведет все доступные операторы методов функций для string
2.0.methods  # для float

















#

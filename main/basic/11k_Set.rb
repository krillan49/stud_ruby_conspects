puts '                                        Set. Набор ключей'

# https://ruby-doc.org/stdlib-3.0.2/libdoc/set/rdoc/Set.html

# Иногда возникает необходимость использовать только ключи в структуре данных “хеш”. Есть специальная структура данных, которая содержит только ключи(без значений). Она называется HashSet (в руби просто Set)
# Set представляет(реализует) собой коллекцию неупорядоченных неповторяющихся(!!!) значений

require 'set' # импортируем пространство имен, т.к. set не определен в пространстве имен по-умолчанию

# конвертирование массива в сет
nodes = ['server1','server1','server2']
nodes.to_set # #<Set: {"server1", "server2"}>

# вычитание сетов
[1,2,3,4,5].to_set - [1,2,3,5].to_set #=>#<Set: {4}>

# Пример использования: нужно определить: все ли буквы английского языка используются в этом предложении?(true - если в предложении содержатся все буквы и false - если каких-то букв не хватает). Т.к. в хеше не может быть дублированных значений, то максимальное количество ключей в хеше - 26 (количество букв английского алфавита). Если количество букв 26, то все буквы были использованы. Тут хорошо бы иметь хеш без значений, чтобы можно было сэкономить память и, самое главное, показать намерение — “значение нам не важно”. В этом случае идеально подходит структура данных HashSet
str = 'quick brown fox jumps over the lazy dog'
require 'set'
def f(str)
  set = Set.new # инициализируем set
  str.each_char do |c| # итерация по каждому символу в строке
    if c >= 'a' && c <= 'z' # только если символ между a и z (игнорируем пробелы и все остальное)
      set.add(c) # добавляем в set
    end
		break if set.size >= 26
  end
  set.size == 26 # результат выражения true, если есть все английские буквы в наборе
end
puts f(str) # выведет true, т.к. в этом предложении используются все буквы англ. алфавита
# Если строка довольно большая, а распределение символов равномерно, то вероятность того, что все символы встретятся где-то вначале очень высока. Поэтому проверка на размер HashSet довольно полезна и в теории должна сэкономить вычислительные ресурсы.


# добавить множество элементов в сет параметр энуменатор
set.merge(enum)

# удалить 1 элемент из сета
set.delete(n)

















#

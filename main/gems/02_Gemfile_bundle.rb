puts '                                          Gemfile и Gemfile.lock'

# Gemfile - (без расширений) это специальный фаил с инструкциями какие гемы необходимо установить для приложения в котором он созданн

# ?? Достаточно поместить gem в Gemfile, и все gem’ы из него будут загружены в память автоматически.

# Можно создать несколько фаилов Gemfile(назвав например для разных версий Рэилс Gemfile-rails-6-1) с разными версиями и наборами гемов


# Пример содержания фаила Gemfile(в данном случае для приложения на Синатре с ActiveRecord)
source "https://rubygems.org" # тоесть искать и устанавливать библиотеки будем с сайта rubygems.org

gem "sinatra"
gem "sqlite3"
gem "activerecord"
gem "sinatra-activerecord"
gem "rake"

group :development do # означает, что когда мы зальем приложение на хостинг, будет понятно что этот гем нужен исключительно для разработки, а не для работы приложения, поэтому в продакшен режиме он будет пропущен
  gem "tux"
  gem "sinatra-contrib"  # этот гем содержит sinatra-reloader
end

gem "letter_opener", group: :development # вариант поместить в группу для 1го гема


# bundle install  - установка(из активной директории в которой лежит Gemfile) (может немного тупить) Устанавливает те гемы из Gemfile которых у нас нет и гемы-зависимости для них, сообщает о тех что уже есть.

# bundle - переводится "связка/комплект/упаковка"

# После установки создастся фаил Gemfile.lock, если его еще не было и в нем появятся/добавятся записи о новых гемах и их версиях. Нужно для того чтоб в нашем приложении не было конфликта различных версий гемов (в этом фаиле были внесены и залочены определенные версии гемов). Нужен для системных целей и потому очень редко редактируется руками

# > bundle install      - устанавливает ранее неустановленные гемы, указанные в Gemfile проекта, учитывая указанные версии
# > bundle i            - алиас bundle install
# > bundle              - алиас bundle install, раньше этого не было

# > bundle update       - обновит все гемы до максимально возможных версий
# > bundle u            - алиас bundle update

# > bundle outdated     - проверить какие библиотеки в нашем приложении можно обновить
# > bundle out          - алиас для outdated

# > bundle exec some    - запускает что либо(тут some) с набором именно тех гемов что есть в гемфаиле
# > bundle exec ruby app.rb

# (! если при применении команды '> bundle' - может вылезти ошибка несовместимости версий бандлеров, значит библиотеки установлены для более старой подсистемы, например мы применяли '> gem update --system', просто обновим гемы '> bundle u' и все заработает)



'~> 3.6' # значит любые версии до 4, тк при изменении мажерной версии гемов появляются несовместимые изменения


# Ты должен через bundle exec запускать свои программы. В рельсах этот механизм по умолчанию происходит

# Бандлер ставит все зависимости по умолчанию в общий скоуп для конкретной версии языка, а затем уже вызывает нужные версии гемов, исходя из файла Gemfile.lock. Это прям очень кратко если. Если ты вызываешь прогу через ruby main.rb, то гемы будут парситься из глобального скоупа, а если bundle exec ruby main.rb, то гемы будут парситься, исходя из файла Gemfile.lock

# В рельсах в это же время подобные вещи происходят из коробки, тебе надо лишь писать bundle exec rails ради нужной версии рельсы, а так там все гемы верно будут подгружаться. Ну либо писать bin/rails











#

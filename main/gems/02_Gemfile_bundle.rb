puts '                                            Bundler'

# https://bundler.io/

# Bundler - это гем для управления и установки других гемов

# Бандлер ставит все зависимости по умолчанию в общий скоуп для конкретной версии языка, а затем уже вызывает нужные версии гемов, исходя из файла Gemfile.lock. Если ты вызываешь прогу через `ruby main.rb`, то гемы будут парситься из глобального скоупа, а если `bundle exec ruby main.rb`, то гемы будут парситься, исходя из файла Gemfile.lock

# bundle - переводится "связка/комплект/упаковка"

# $ gem install bundler

# При помощи Bundler можо в Gemfile указать все библиотеки, которые будут нужны в нашем проекте



puts '                                     Gemfile и Gemfile.lock'

# Gemfile - (без расширений) это специальный фаил с инструкциями какие гемы необходимо установить для приложения в котором он созданн, куда разработчик записывает какие ему нужны гемы и каких версий

# $ bundle init                - команда создаст новый Gemfile в этом проекте содержашим:
#=>
# frozen_string_literal: true
source "https://rubygems.org"
git_source(:github) {|repo_name| "https://github.com/#{repo_name}" }
# gem "rails"


# Можно создать несколько фаилов Gemfile(назвав например для разных версий Рэилс Gemfile-rails-6-1) с разными версиями и наборами гемов


# Пример содержания Gemfile (тут для Синатры с ActiveRecord):
source "https://rubygems.org" # тоесть искать и устанавливать библиотеки(команда bundle) будет с сайта rubygems.org
gem "sinatra"
gem "sqlite3"
gem "activerecord"
gem "sinatra-activerecord"
gem "rake"
group :development do # означает, что когда мы зальем приложение на хостинг, будет понятно что этот гем нужен исключительно для разработки, а не для работы приложения, поэтому в продакшен режиме он будет пропущен
  gem "tux"
  gem "sinatra-contrib"  # этот гем содержит sinatra-reloader
end
gem "letter_opener", group: :development # вариант поместить в группу для 1го гема


# $ bundle install  - установка (из активной директории в которой лежит Gemfile) тех гемов нужных версий из Gemfile которых у нас нет и гемы-зависимости для них. Предварительно скачивает с рубигемс (или откудато еще если указать). Например когда еще не ставили ничего, либо поменяли/удалили/добавили какие-то гемы


# Gemfile.lock - генерируется бандлером после установки (bundle install), если его еще не было и в нем появятся/добавятся записи о новых гемах и их версиях. Нужен для того чтобы в нприложении не было конфликта различных версий гемов (в этом фаиле были внесены и залочены определенные версии гемов). Нужен для системных целей и потому очень редко редактируется руками

# > bundle install      - устанавливает ранее неустановленные гемы, указанные в Gemfile проекта, учитывая указанные версии
# > bundle i            - алиас bundle install
# > bundle              - алиас bundle install, раньше этого не было

# > bundle update       - обновит все гемы до максимально возможных версий
# > bundle u            - алиас bundle update

# > bundle outdated     - проверить какие библиотеки в нашем приложении можно обновить
# > bundle out          - алиас для outdated

# $ bundle show rails   - проверить версию конкретного гема (тут Рэилс), который стоит у нас в проекте и путь куда он этот гем поставил

# bundle exec - связка команд, чтобы при запуске идущей следом команды (не обязательно команды бандлера, а например команд Рэилс, в том числе генераторов итд) были использованны именно те гемы, что прописаны в Gemfile, тк иначе могут быть использованы какие-то другие версии гемов, которые есть в системе. Можно применять с любой командой. ?? Ты должен через bundle exec запускать свои программы. В рельсах этот механизм по умолчанию происходит. В рельсах в это же время подобные вещи происходят из коробки, тебе надо лишь писать bundle exec rails ради нужной версии рельсы, а так там все гемы верно будут подгружаться. Ну либо писать bin/rails ??

# > bundle exec some    - запускает что либо(тут some) с набором именно тех гемов что есть в гемфаиле
# > bundle exec ruby app.rb

# > bundle add pundit  - добавить гем без ручного прописывания (?? Только Рэилс ??)



puts '                                      Синтаксис версий гемов'

gem "some", '3.6.3'  # бндлер будет ставить столько эту конретную версию гема
gem "some", '>= 3.6' # бндлер будет ставить самую новую версию но только если она равна или больше данной конретной версии гема
gem "some", '~> 3.6' # бндлер будет ставить самую новую версию но до 4й мажерной. Именяет только последнюю подверсию, тоесть если '~> 3.6.5' - будет ставить уже до 3.7
gem "some"           # бндлер будет ставить самую новую версию, если версия не указана



puts '                                        Исправление багов'

# (! если при применении команды '> bundle' - может вылезти ошибка несовместимости версий бандлеров, значит библиотеки установлены для более старой подсистемы, например мы применяли '> gem update --system', просто обновим гемы '> bundle u' и все заработает)


# Если лезут какието предупреждения(например что-то про инсталяцию констант) об устаревших гемах и переменных то можно просто:
# 1. Принудительно очистить неиспользуемые гемы в каталоге сборщика
# $ bundle clean --force
# 2. Даее переустановить гемфаилы проекта однним из этих вариантов:
# $ bundle install
# $ bundle update
# $ bundle update --force











#

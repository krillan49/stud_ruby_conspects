puts '                                        GC. Mark and Sweep'

# GC (Garbage Collection) - это автоматическое управление памятью в Ruby. GC отвечает за освобождение памяти, которая больше не используется программой

# Ruby использует алгоритм "Mark and Sweep" (пометить и очистить) для сборки мусора.  Этот алгоритм состоит из двух основных фаз:

# 1. (Пометка):
# a) GC начинает с поиска корневых объектов. Корневые объекты - это объекты, которые всегда доступны и не могут быть собраны мусором (например, глобальные переменные, локальные переменные активных стеков вызовов).
# b) GC рекурсивно обходит все объекты, на которые ссылаются корневые объекты, и помечает их как "живые" (reachable). Он продолжает это делать, пока не будут помечены все объекты, на которые можно добраться из корневых.

# 2. Sweep (Очистка):
# a) После того, как все "живые" объекты помечены, GC проходит по всей памяти, выделенной для объектов Ruby.
# b) Все объекты, которые не были помечены как "живые", считаются мусором.
# c) GC освобождает память, занимаемую этими объектами. Эта память становится доступной для повторного использования.


# Улучшения и модификации Mark and Sweep в Ruby:
# 1. Generational GC (Сборка мусора по поколениям): Более современные версии Ruby (особенно Ruby 2.1 и выше) используют generational GC. Идея в том, что большинство объектов "умирают" вскоре после создания. Generational GC фокусируется на сборе мусора среди "молодых" объектов, что значительно повышает эффективность сборки мусора.
# 2. Incremental GC (Инкрементная сборка мусора): Ruby использует инкрементную сборку мусора, чтобы уменьшить время приостановки (pause time) приложения во время сборки мусора. Вместо того чтобы выполнять всю сборку мусора за один раз, инкрементная сборка мусора выполняет её постепенно, небольшими частями. Это позволяет избежать длительных пауз, которые могут быть заметны пользователю.
# 3. Lazy Sweeping (Ленивая очистка): Некоторые версии Ruby используют ленивую очистку, что означает, что память не освобождается немедленно после того, как объект был помечен как мусор. Вместо этого память освобождается позже, когда это необходимо.


# Сборка мусора - это автоматический процесс, но он требует времени и ресурсов. GC может вызывать паузы в работе приложения, особенно если в памяти находится много объектов. Оптимизация кода для уменьшения количества создаваемых объектов и предотвращения утечек памяти может значительно улучшить производительность Ruby-приложения.



puts '                                          Управление GC'

# Ruby предоставляет некоторые инструменты для управления GC, хотя прямое управление достаточно ограничено:

GC.start # Запускает сборку мусора вручную. Обычно не рекомендуется использовать это, так как GC хорошо справляется автоматически. это рекомендательная функция, типа "я тут подумал, что было бы неплохо убраться, если тебе нечем прям сейчас заняться, попробуй убраться" те сборка не моментальная

GC.disable # Отключают и включают сборку мусора. Yе рекомендуется отключать GC надолго, так как это приведет к утечкам памяти.
GC.enable  # Включают сборку мусора.

GC.stat # Возвращает информацию о состоянии GC (количество объектов, количество сборок мусора и т.д.).

# ObjectSpace - модуль, может показать например все объекты в памяти
ObjectSpace.each_object # Позволяет перебирать все объекты в памяти (осторожно, это может быть медленно).














#

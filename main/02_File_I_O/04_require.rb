puts '                                   Подключение кода из другого фаила'

# require и require_relative - операторы загружающие код из целевого фаила, путь к которому передан как параметр, в текущий фаил, подеружаеть код в ту точку в которой прописано это ключевое слово

# Между фаилами передаются классы, константы, модули и методы, но не передаются локальные переменные

# Объекты можно передавать между файлами. Поэтому если объявить метод в одном файле, он автоматом цепляется к глобальному объекту main, то в другом файле (подключив при помощи require) его тоже можно вызовать потому, что там тоже есть этот глобальный объект main.



puts '                                           require_relative'

# require_relative - загружает/подключает фаил с указанным путём относительно местоположения/директории текущего фаила, тоесть того фаила в котором прописано, вне зависимости от того какая текущая директория в терминале в котором он будет исполнен.

require_relative "tools/some_code" # подключаем по относительному пути (расширение писать не обязательно)

# Теперь код из фаила исполняется в точке c require_relative:
#                   #=> "hello 1"
say_hello("George") #=> "Hi, George"



puts '                                                require'

# require - ключевое слово для подключения фаила, подключает фаил относительно текущей директории в терминале, в котором он будет исполнен.

# './' - текущая директория терминала и далее путь к этому фаилу (?? без этого не работает почемуто ??)

# (?? Можно подключить "$LOAD_PATH << '.'" чтобы искать фаилы в текущем каталоге ??)

require './tools/some_code_2' # подключаем фаил относительно текущей директории в терминале (расширение писать не обязательно)
# require './main/02_File_I_O/tools/some_code_2' # подключаем в атомранер, тк тут текущая дерикторимя от корня проекта
# require 'tools/some_code_2' # cannot load such file -- tools/some_code_2 (LoadError)

# Теперь код из фаила исполняется в точке c require:
#             #=> "hello 2"
say_bye_bye() #=> "Bye bye"














#

puts '                                                 RVM'

# https://rvm.io/

# https://www.youtube.com/watch?v=R4LNZSshzqE     -  гайд по установке на Линукс
# https://www.youtube.com/watch?v=4a_EK6rNE6Y     -  гайд по становке на MAC

# !!! На RVM болт забили, потому лучше перейти на rbenv или asdf


# rvm (ruby version manager) - менеджер версий руби, инструмент для командной строки, который позволяет установить и работать со многими разными версиями Руби (разными оружениями от интерпретаторов до наборов gem’ов) и переключаться между ними, когда это необходимо.

# Rvm - это надстройка для вашей оболочки (shell), которой может являться или bash, или zsh, или что-то еще (например, RubyMine).

# rvm - это просто сложный Bash Shell скрипт, содержащий фунцию с командами

# Можно использовать только на *nix системах



puts '                                  Установка дополнительных утилит на Линукс'

# Перед тем как поставить RVM нужно поставить дополнительные утилиты:

# 1. Установим менеджер пакетов curl, командную утилиту, которая облегчает скачивание фаилов из командной строки:
# $ sudo apt-get install curl       -  стандартным способом
# $ sudo aptitude install curl      -  либо с помощью менеджера пакетов aptitude

# 2. Установим еще набор различных вспомогательных пакетов для установки Руби, RVM, Heroku итд
# $ sudo apt-get install git-core build-essential libgdbm-dev libncurses5-dev automake libtool bison libffi-dev nodejs



puts '                                           Установка RVM на Линукс'

# Для установки rvm по очереди выполняем команды, что перечислены в пункте "Cut Rubies with ease!" на https://rvm.io/, если что-то пойдет не так на сайте могут быть подсказки


# 1. Install GPG keys - Добавим необходимые ключи шифрования в нашу систему (чтобы точно знать что установим нужный скрипт ??):
# $ gpg2 --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
# Если возникли какие-то проблемы можно использовать другой сервер ключей, будет та же самая команда, только с другим адресом, например hkp:keys.gnupg.net вместо keyserver.ubuntu.com


# 2a. Install RVM - при помощи curl скачаем дистрибутив, распакуем и запустим в работу. Лучше использовать ее и устанавливать Рэилс отдельно:
# $ \curl -sSL https://get.rvm.io | bash -s stable
# Выдаст предупреждения про подписи которые не принадлежат владельцу итд - похер

# 2b. For installing RVM with default Ruby and Rails in one command, run - тоже что и выше, но дополнительно установит и Рэилс:
# $ \curl -sSL https://get.rvm.io | bash -s stable --rails


# Поле установки, чтобы rvm работал, нужно перелогиниться в системе, тк rvm изначально выполняется в фаиле .bash_profile, который выполняется при первом логине в этой сессии в систему
# Либо можно настроить терминал - в настройках терминала в нашем профиле в меню Команда/Command поставить галочку на пункте "Запускать команду как оболочку входа / Run command as a login shell". Тогда каждый новый терминал будет открываться как будто он логинится в систему и каждый раз будет выполняться фаил .bash_profile


# (?? не делал, хз зачем ?? небольшое дополнение для тех кто устанавливает Ruby на Linux:)
# После установки rvm и открытия окошка терминала (не забыв поставить галку run command as login shell (для гномовского баша, остальны как-то аналогично)), затем делаем команды
# rvm pkg install openssl
# rvm install ruby-2.7.6 --with-openssl-dir=$HOME/.rvm/usr



puts '                                    Как работает RVM. .ruby-version'

# Установщик rvm изменил переменную PATH. При этом rvm установил себя в домашнюю директорию в каталог .rvm
# $ ls -lah ∼/.rvm                - посмотреть содержимое каталога .rvm
# «Перехватив» таким образом путь, rvm будет «подсовывать» ту или иную версию Руби в зависимости от обстоятельств.

# rvm подменяет команду оболочки "cd". Когда вы меняете директорию при помощи "cd", rvm пытается определить какой Руби нужно использовать сейчас. У rvm есть два варианта действий после того, как вы сменили директорию:
# • Молча (или почти молча) «Подсунуть» вам нужную версию руби, чтобы вы ничего не заметили
# • Не делать ничего

# Алгоритм выбора версии. Было достигнуто соглашение о том, текущая версия руби для определенного проекта должна храниться в файле ".ruby-version" в директории проекта. Этот файл должен просто содержать строку с версией руби, например 2.5.1. И при смене директории (следующем переходе в эту дирнкторию) в терминале, rvm попробует «подсунуть» вам эту версию руби «почти молча»: если она еще не была скачена из интернета, то rvm сообщит об этом.
# $ echo "2.3.1" > .ruby-version

# .ruby-version в директории проекта очень важен, т.к. другие программисты будут точно знать какой версией руби вы пользовались, когда создавали работали над проектом. А если этой версии на компьютере разработчика нет, то RVM подскажет как ее установить

# Просто будет подмена PATH, переменной, которая отвечает за пути к файлам. И теперь наша оболочка просто обращается к другой директории



puts '                                          Использование RVM'

# $ which rvm          => /home/krillan/.rvm/bin/rvm      - покажет путь по которому установлен rvm

# Можно посмотреть куда rvm-скрипт прописался - откроем в нашей домашней дирректории фаил настроек оболочки Bash .bash_profile, он выполняется 1 раз при логине в систему, при первом логине в сессию оболочки
# $ vi .bash_profile            - тут на одной из строчек видно, что rvm прописал себя в этот фаил, тоесть прописал команды по загрузке содержимого своих фаилов, которое уже будет выполнять необходимые нам функции - установку и поддержку версий Руби
# $ vi .profile                 - можно посмотреть и тут

# $ type rvm                        - выведет весь исходный код скрипта с функией rvm

# $ rvm get stable                  - обновить rvm до актуальной версии

# $ rvm -v                          - версия rvm и инфа о владельцах ключей

# $ rvm --help                      - справка по командам

# $ rvm list                        - выведет список всех версий Руби уже установленных в систему при помощи rvm, а так же отметит при помщи "=" ту версию которая сейчас используется и при помощи "*" ту версию, что является версией по умолчанию

# $ rvm list known                  - выведет список всех версий Руби которые возможно установить при помощи rvm, этот список он хранит локально, а не берет из инета ( Нас интересует версии MRI)


# $ rvm install 3.1.2               - установка Руби версии 3.1.2. Скачает исходник и скомпилирует под нашу операционку, дополнительно подтянет и установит все необходимые дополнительные пакеты (может занять какое-то время). Вместе с Руби установится и менеджер пакетов и менеджер гемов и irb и все что соответсвует любому полноценному дистрибутиву Руби
# RVM пытается найти где-то на своих серверах версии руби по следующим признакам:
# • тип ОС, может быть Linux, Windows или что-то еще (теоретически)
# • версия ОС, существует множество разных версий как macOS, так и остальных ОС
# • архитектура процессора
# • версия Руби
# RVM держит на своих серверах тысячи откомпилированных версий руби для разных систем.

# Посмотреть где теперь стоит текущая версия Руби:
# $ which ruby        => /home/krillan/.rvm/rubies/ruby-3.1.2/bin/ruby
# Тоесть теперь стоит не в системной директории доступной только root, а в домашней директории конкретного пользователя, который устанавливал, в директории .rvm

# $ rvm remove 3.1.2                - удалить ненужную версию Руби
# $ rvm uninstall 3.1.2             - удалить ненужную версию Руби (? алиас к remove ?)

# $ ruby -v                         - проверяем текущую версию руби обычным способом
# $ gem -v                          - проверяем менеджер гемов обычным способом
# $ gem update --system             - обновляем менеджер гемов обычным способом

# $ rvm use 3.1.2                   - переключиться на использование Руби версии 3.1.2 в качестве текущей в окне терминала, тоесть в данной сессии нашего Bash

# $ rvm use 3.1.2 --default         - переключиться на использование Руби версии 3.1.2 в качестве текущей как дефолтной в любом новом окне терминала

# В RVM существует такое понятие как default версия (версия по умолчанию). Другими словами та версия, которая будет автоматически использоваться при открытии терминала. Ее можно установить с помощью команды alias:
# $ rvm alias create default 2.5.1           - делаем версию 2.5.1 дефолтной
# $ rvm use default                          - переключиться на дефолтную версию (тоесть на 2.5.1)

# Можно переключиться на системную версию Руби (если Руби установлен системно)
# $ rvm --default use system
# $ rvm --default use 3.1.2              - вернуться на какую либо из RVM версий



puts '                                               gem'

# Для каждой из версий Руби будет свой собственный отдельный набор гемов(в том числе и Рэилс), тоесть при переключении версий Руби и все их гемы будут отдельными, что были установлены, пока была активна эта версия.

# Установим гем Рэилс и посмотрим где он лежит
# $ gem install rails
# $ gem info rails      - выведет инфу о геме, в том числе путь к нему например /home/krillan/.rvm/gems/ruby-3.1.2

# Так же можно посмотреть или зайти в директорию с гемами для данной версии Руби и увидет там директории всех установленных гемов
# $ ls /home/krillan/.rvm/gems/ruby-3.1.2/gems



puts '                                              gemset'

# Sets of gems (или gemset) — набор gem’ов, дает возможность иметь разные наборы gem’ов для одной и той же версии руби.

# Сейчас оно все реже используется, т.к. при использовании инструмента Bundler последних версий отпадает необходимость в таком понятии как gemset. Bundler уже позволяет иметь разные наборы gem’ов, и каждый раз когда вы вносите исправления в Gemfile и вводите bundle, все происходит автоматически и без каких-либо проблем

# С помощью gemset-ов можно использовать вместе разные версии Rails и Ruby. Это делается с помощью команды gem. Gemset-ы позволяют создавать полнофункциональные окружения для gem-ов, а также настраивать неограниченное количество окружений для каждой версии Ruby.

# $ rvm gemset create gemset_name     - create a gemset

# $ rvm ruby_version@gemset_name      - specify Ruby version and our new gemset














#

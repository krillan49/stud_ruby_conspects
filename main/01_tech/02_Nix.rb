puts '                                   Установка системного Руби на MAC'

# https://www.youtube.com/watch?v=pRkk_Krkx2c

# В Маке Руби уже изначально стоит, но обычно не самой новой версии



puts '                         Установка системного Руби на Linux и настройки $PATH'

# Установить системный Руби если его нет:
# $ sudo apt install ruby-full


# «Системный» руби  - это тот Руби, который был установлен из пакета и находится(устанавливается) в системной директории /usr/bin, к этой директории есть доступ только у root. Если используется системный Руби то и все гемы будут ставиться в системную папку, тоесть доступ тоже тлько у root и придется использовать sudo

# Проверить где находится исполняемый файл ruby(при помощи которого запускаются программы в терминале, например "ruby app.rb") в системе без менеджеров версий:
# $ which ruby            => /usr/bin/ruby          (если выввело этот путь, значит есть установленный системный Руби)
# Другими словами, интерпретатор руби (системного) находится в /usr/bin/ruby. Это бинарный файл, его можно просмотреть с помощью, например, Far Manager. Если удалить этот файл, то руби-программы запускаться не будут

# Чтобы система понимала, что руби нужно брать именно из каталога /usr/bin он заносится в переменную $PATH (путь) в нашей оболочке
# $ echo $PATH
#=> /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin      (будет что-то типа такого)
# Переменная $PATH содержит несколько директорий, разделенных двоеточием, среди которых есть и /usr/bin - директория с интерпретатором руби

# Когда вводится команда "ruby" оболочка пытается найти файл в первой директории из тех что есть в $PATH, если не находит то во второй и так далее.

# Если переопределить переменную $PATH, то можно заставить оболочку искать исполняемый файл "ruby" где-либо еще. Для переопределения надо добавлять новый путь в начало, а не в конец


# Чтобы добавить путь, чтобы он попал в $PATH, нужно посасть в настройки bash:

# Настройки bash хранятся в домашнем каталоге в дот-файле с именем .bashrc
# $ echo $HOME                     - получить путь к домашнему каталогу
# $ echo ~                         - получить путь к домашнему каталогу

# В POSIX/UNIX-совместимых системах dot-file это файл с точкой впереди. Он считается скрытым(можно посмотреть с помощью "ls -a")

# В Windows дот-файлы являются обычными файлами. А hidden-файлы это файлы с особым атрибутом. Существует комбинация Ctrl+A в Far Manager для Windows для просмотра и установки атрибутов

# Настройки zsh хранятся в ∼/.zshrc. Возможно, в этих файлах уже есть определение переменной PATH



puts '                                   Замена системного Руби на Linux'

# Так же можно скачать другую стабильную версию на свой компьютер и рапаковать (Файл обычно скачивается в виде tar.gz-архива)


# 1. После распаковки там будет исходный код языка, а не готовый исполняемый файл. Поэтому руби нужно «собрать» для того, чтобы получился исполняемый файл, с помощью которого уже можно будет запускать программы:
# $ cd ruby-3.1.0
# $ ls -lah                  - посмотреть что в распакованном архиве
# $ ./configure
# #=>
# checking for ruby... /usr/bin/ruby
# ...
# $ make
# CC = clang
# LD = ld
# ...
# После сборки в текущей директории появится бинарный исполняемый файл, который можно запустить:
# $ ./ruby -v                  =>  ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]
# Префикс ./ говорит о том, что нужно запустить тот файл, что находится в текущей директории, а не тот, который находится в переменной оболочки PATH. Можно сравнить с тем, что в PATH:
# $ ruby -v                    =>  ruby 2.3.3p222 (2016-11-21 revision 56859) [universal.x86_64-darwin17]


# 2. Заменить системный Руби только что скомпилированной другой версией языка:
# $ sudo make install
# Но на macOS новая версия языка будет установлена в /usr/local/bin. А текущий системный руби установлен в /usr/bin. Но это не проблема, т.к. первая директория находится перед последней в переменной PATH. Необходимо перезапустить терминал чтобы оболочка приняла изменения (или выполнить команду "source ∼/.bashrc" для bash или "source ∼/.zshrc" для zsh)
















#

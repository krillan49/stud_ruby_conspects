puts '                              Operator Overloading / Перегрузка оператора'

class Integer
  def !
    (1..self).inject(:*)
  end
end

p !5 # почему ставим спереди ??

# Перегрузка операторов (или операторная перегрузка) — это возможность определять(или переопределять), как операторы должны работать с конкретными типами данных. Например, оператор "+" может быть переопределен так, чтобы выполнять вычитание вместо сложения.

# Операторы переопределяются как методы соответсвующих классов, имя этого метода является символом изменяемого оператора, за которым может следовать дополнительный параметр для применения его с оператором к вызывающему его объекту. Метод оператора вызываются, когда объект вызывает соответствующий оператор.

# Операторы, которые могут быть перегружены:    +, -, /, *, **, %, итд.
# Операторы, которые не могут быть перегружены: &, &&, |, ||, (), {}, ~, итд.

# Перегрузка операторов не является коммутативной, тоесть 3 + a не совпадает с a + 3.

class Car
  attr_accessor :name, :color

  def initialize(name, color)
    @name = name
    @color = color
  end

  # Называем метод, символом того оператора который хотим переназначить(перегрузить) для данного класса
  def +(obj) # параметр принимает то, что идет после оператора +
    Car.new("#{self.name}#{obj.name}", "#{self.color}#{obj.color}") # Теперь сложение для объектов этого класса складывает названия его свойств и возвращает новый объект
  end

  def /(obj) # Теперь перегруженный оператор "/" делает тоже самое что и перегруженный ранее "+"
    Car.new("#{self.name}#{obj.name}", "#{self.color}#{obj.color}")
  end

  def <=>(obj) # Перегружаем оператор сопоставления для объекто этого класса, теперь он сравнивает значения свойств объектов
    self.name <=> obj.name
  end
end

a = Car.new("Gaz", "Red")
b = Car.new("Opel", "Silver")

p a + b #=> #<Car:0x0000013f71d05320 @name="GazOpel", @color="RedSilver">
p a / b #=> #<Car:0x0000013f71d05320 @name="GazOpel", @color="RedSilver">

p a <=> b #=> -1   # тк ASCII-код "G" (71) меньше, чем "O" (79)


puts
# Перегрузка оператора для мат опереций свойства объекта с числом:
class Tester
  def initialize(num)
    @num = num
  end
  # Сложение свойства объекта и числа
  def +(obj) #  В качестве параметра obj выступает число идущее после + в выводе
    @num + obj  # Свойство можно вызвать просто переменной без ссылки на объект либо при помощи self.num
  end
  # Умножение свойства объекта и числа
  def *(obj)
    @num * obj
  end
  # Возведение свойства объекта в степень числа
  def **(obj)
    @num ** obj
  end
end
a = Tester.new(5)
puts a + 3 #=> 8
puts a * 3 #=> 15
puts a ** 3 #=> 125
# (Примечание: перегрузка оператора не является коммутативной операцией, т.Е. Если бы мы использовали 3 + a вместо a + 3, мы получили бы такую ошибку: source_file.rb:17:in `+’: Тестер не может быть принужден к Fixnum (TypeError) из source_file.rb:17:в `)


puts
# Перегрузка оператора для мат опереций свойства объекта со свойством другого объекта
class Tester
  attr_accessor:num

  def initialize(num)
    @num = num
  end
  # Сложение свойств объектов
  def +(obj)
    self.num + obj.num
  end
  # Перемножение свойств объектов
  def *(obj)
    self.num * obj.num
  end
  # Возведение свойства объекта в степень свойства другого объекта
  def **(obj)
    self.num ** obj.num
  end
end
a = Tester.new(5)
b = Tester.new(4)
puts a + b #=> 9
puts a * b #=> 20
puts a ** b #=> 625
a += b
p a #=> 9  # операторы сокращенной записи например ‘+=’ должны быть определены через оператор мат действия тут +, те достаточно определить оператор ‘+’, и компилятор автоматически использует его в смысле ‘+=’


puts
# Другие примеры(с возвратом нового объекта): Оператор + выполняет векторное сложение двух объектов с помощью +. Оператор * умножает свойства объекта на скаляр. Ннарный оператор - инвертирует свойства.
class Box
  attr_accessor :width, :height

  def initialize(w,h)
    @width,@height = w, h
  end

  def +(other)       # Возврат новго объекта со свойствами полученными сложением свойств 2х объектов
    Box.new(@width + other.width, @height + other.height)
  end

  def -@             # Возврат нового обьекта cо свойствами вызванного объекта с другим знаком
    Box.new(-@width, -@height)
  end

  def *(scalar)     # Возврат нового обьекта со свойствами вызванного объекта умноженными на число
    Box.new(@width * scalar, @height * scalar)
  end
end

a = Box.new(2, 3)
b = Box.new(4, 5)

p a + b #=> #<Box:0x000001f947805718 @width=6, @height=8>
p -a #=> #<Box:0x000001fc62045028 @width=-2, @height=-3>
p b * 10 #=> #<Box:0x000001c6b1768e18 @width=40, @height=50>


puts
# Перегрузка операторов - ссылок на элементы:
class Array_Operators
  attr_accessor:arr

  def initialize(*arr)
    @arr = arr
  end
  # Перегрузка оператоа [] для вызова от свойства объекта, значение x в который передается при вводе
  def [](x)
    @arr[x]
  end
  # Перегрузка оператоа присвоения "[] = " для вызова от свойства объекта, значения x и value в который передается при вводе
  def []= (x, value)
    @arr[x] = value
  end
  # Перегрузка оператоа << для вызова от свойства объекта, значение x в который передается при вводе
  def <<(x)
    @arr << x
    "#{@arr}"
  end
end
a = Array_Operators.new(0, 3, 9, 27, 81)
puts a[4] #=> 81
a[5] = 51
puts a[5] #=> 51
puts a << 41 #=> [0, 3, 9, 27, 81, 51, 41]
puts a[6] #=> 41















#

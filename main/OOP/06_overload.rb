puts '                              Operator Overloading / Перегрузка оператора'

# Перегрузка операторов - это возможность определять(или переопределять), как операторы должны работать с конкретными типами данных. Например, оператор "+" может быть переопределен так, чтобы выполнять вычитание вместо сложения.

# Операторы переопределяются как методы соответсвующих классов, имя этого метода является символом изменяемого оператора, за которым может следовать дополнительный параметр для применения его с оператором к вызывающему его объекту. Метод оператора вызываются, когда объект вызывает соответствующий оператор.

# Операторы, которые могут быть перегружены:    +, -, /, *, **, %, итд.
# Операторы, которые не могут быть перегружены: &, &&, |, ||, (), {}, ~, итд.

# Перегрузка операторов не является коммутативной, тоесть 3 + a не совпадает с a + 3.



puts '                                     Определение нового оператора'

# Определим новый оператор во встроенном классе
class Integer
  def !
    (1..self).inject(:*)
  end
end
p !5 # почему ставим спереди ??


# Определим операторы в кастомном классе
class Box
  attr_accessor :width, :height

  def initialize(w,h)
    @width, @height = w, h
  end

  # Называем метод, символом того оператора который хотим переназначить(перегрузить) для данного класса
  def %(obj) # параметр принимает то, что идет после оператора %
    Box.new("#{self.width}%#{obj.width}", "#{self.height}%#{obj.height}") # Теперь "%" для объектов этого класса складывает названия его свойств и возвращает новый объект
  end

  def /(obj) # Теперь перегруженный оператор "/" делает тоже самое что и перегруженный ранее "%"
    Box.new("#{self.width}/#{obj.width}", "#{self.height}/#{obj.height}")
  end

  def +(obj)        # Перегрузка оператора для мат опереций свойства объекта с числом и возвратом значения
    @width + obj
  end

  def **(obj)       # Перегрузка оператора для мат опереций свойства объекта со свойством другого объекта и возвратом значения
    self.width + obj.width
  end

  def <=>(obj)      # Перегружаем оператор "<=>" для объектов этого класса, теперь он сравнивает значения свойств
    self.height <=> obj.height
  end

  def ^(other)      # Возврат новго объекта со свойствами полученными сложением свойств 2х объектов (векторное сложение)
    Box.new(@width + other.width, @height + other.height)
  end

  def *(scalar)     # Возврат нового обьекта со свойствами вызванного объекта умноженными на число
    Box.new(@width * scalar, @height * scalar)
  end

  def -@            # Возврат нового обьекта cо свойствами вызванного объекта с другим знаком
    Box.new(-@width, -@height)
  end
end

a = Box.new(2, 3)
b = Box.new(4, 5)
c = Box.new(2, 3)

p a % b  #=> #<Box:0x0000020ebbae2650 @width="2%4", @height="3%5">
p a / b  #=> #<Box:0x0000020ebbad2700 @width="2/4", @height="3/5">

p a + 3  #=> 5
# Операторы сокращенной записи например ‘+=’ определяются через соответсвующий оператор мат действия (тут +), те достаточно определить оператор ‘+’, и компилятор автоматически использует его в смысле ‘+=’. Но так в переменную присвоится вывод метода, нужно это учитывать
a += 100
p a      #=> 105

p b ** c  #=> 6
p b <=> c #=> 1

p c ^ b  #=> #<Box:0x000001f947805718 @width=6, @height=8>
p b * 10 #=> #<Box:0x000001c6b1768e18 @width=40, @height=50>
p -c     #=> #<Box:0x000001fc62045028 @width=-2, @height=-3>



puts '                                   Перегрузка ссылок на элементы'

class Array_Operators
  attr_accessor:arr

  def initialize(*arr)
    @arr = arr
  end
  # Перегрузка оператора [] для вызова от свойства объекта, значение x в который передается при вводе
  def [](x)
    @arr[x]
  end
  # Перегрузка оператоа присвоения "[] = " для вызова от свойства объекта, значения x и value в который передается при вводе
  def []= (x, value)
    @arr[x] = value
  end
  # Перегрузка оператоа << для вызова от свойства объекта, значение x в который передается при вводе
  def <<(x)
    @arr << x
    "#{@arr}"
  end
end

a = Array_Operators.new(0, 3, 9, 27, 81)

puts a[4]    #=> 81
a[5] = 51
puts a[5]    #=> 51
puts a << 41 #=> [0, 3, 9, 27, 81, 51, 41]
puts a[6]    #=> 41















#

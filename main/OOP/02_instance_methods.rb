puts '                                          Методы экземпляра'

# Чтобы вызвать метод эземпляра необходим экземпляр, тоесть объект от которого он будет вызваан

# Методы экземпляра запускаются в контексте объекта (и имеют доступ к переменным объекта/экземпляра). Доступ к методу экземпляра осуществляется через экземпляр/объект класса

# Тк методы в отличие от переменных могут быть вызваны извне класса, то их названия еще желательней называть максимально понятно, чтобы можно было понять что они делают без документации. Нужно называть их в фоме глагола (что делает этот метод), либо в фоме свойства (например у каленаря метот year вернет текущий год)

# Принято что методы должны быть достаточно короткими и выполнять какую-то одну задачу. Это улучает читаемость (особенно если название метода говорящее, можно даже совсем небольшие участки кода, если они не очень понятны выделять в говорящие методы, чтобы улучшить читаемость) и позволяет переиспользовать метод более универсально



puts '                                  alias_method(псевдонимы методов в классе)'

# alias_method - позволяет сделать вызов одного метода разными атрибутами, названием изначального метода и новым произвольным атрибутом. Работает только с методами экземпляра

# При помощи кодового слова alias_method можно
class AtbashCipher
  def one(str)
    str[0]
  end

  alias_method :other, :one
end

a = AtbashCipher.new
p a.one('asf') #=> "a"
p a.other('asf') #=> "a"



puts '                                              Метод to_s'

# to_s (зарезервированное имя) - метод экземпляра для возврата строкового представления объекта, при применении оператора puts к объекту или интерполяции переменной объекта, метод to_s автоматически вызывается

class Box0
  def initialize(w,h)
    @width, @height = w, h
  end
end

class Box
  def initialize(w,h)
    @width, @height = w, h
  end

  def to_s
    "w:#{@width} h:#{@height} Ha-ha!"
  end
end

box0 = Box0.new(10, 20)
box = Box.new(10, 20)

puts box0 #=> #<Box0:0x00000210af1ee8a0>

puts box  #=> w:10 h:20 Ha-ha!
p "#{box}" #=> "w:10 h:20 Ha-ha!"

# Но если инспектировать без интерполяции все равно выаст обьект
p box          #=> #<Box:0x000001ccb5842730 @width=10, @height=20>
puts box + '1' #=> undefined method `+' for #<Box:0x0000027dc8bee4a0 @width=10, @height=20>



puts '                      Обращение объекта к другому объекту через свой метод экземпляра'

# Можно обращаться от объекта не только к самому себе, но и к другому объекту этого класса, вызывая его атрибуты и методы
class Someobj
  attr_reader :name, :rounded

  def initialize name, rounded
    @name, @rounded = name, rounded
  end

  def its_rounded? # К методу тоже можно обратиться от переданного объекта
    @rounded
  end

  def name_self # Объект может обратиться только к себе
    self.name
  end

  def name_any(figure) # Можно обратиться и к себе и к другому объекту через параметр метода
    figure.name # Можно обратиться к переменной через атрибут
  end

  def rounded_any(figure)
    figure.its_rounded? # Можно обратиться к данным через метод доступа
  end
end

oval = Someobj.new('Oval', true)
kvadrat = Someobj.new('Kvadrat', false)
p oval.name_any(oval)       #=> "Oval"     # Обращение к своему атрибуту
p oval.name_any(kvadrat)    #=> "Kvadrat"  # Обращение к атрибуту другого объекта
p oval.rounded_any(oval)    #=> true       # Обращение к своему значению переменной через метод
p oval.rounded_any(kvadrat) #=> false      # Обращение к значению переменной другого объекта через метод















#

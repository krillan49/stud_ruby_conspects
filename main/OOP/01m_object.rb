puts '                                              Объекты'

# Объект - это определенная часть(участок) занятой оперативной памяти, которая "принадлежит" какому-то фрагмету кода, существующий во время работы программы.

# Переменная не “содержит” сам объект, это просто ссылка на область памяти, где на самом деле этот объект хранится. Может быть любое количество переменных, указывающих на один и тот же объект.

# В Руби объекты это всегда экземпляры какого-то класса(instance)

# Любой код исполняется интерпритатором, в контексте какого-то объекта, даже в корневой области видимости (объект main класса Object)
p self       #=> main
p self.class #=> Object



puts '                                             object_id'

# object_id - метод показывает адрес данного объекта в памяти. Он нужен, чтобы сравнивать разные объекты между собой

# Разные объекты с одинаковым значением:
a, b = "zen", "zen"
a.object_id  #=> 20139460
b.object_id  #=> 19972120

# Один и тот же объект на который ссылаются 2 переменные
a = "zen"
b = a
a.object_id     #=> 18637360
b.object_id     #=> 18637360
a.equal? b      #=> true
a.equal? a.dup  #=> false



puts '                                    Проверить принадлежность классу'

# class - метод возвращает константу класса, к которому относися данный объект
p 1.class   #=> Integer
p [].class  #=> Array

# Целые числа являются экземплярами класса Fixnum, который является подклассом класса Integer. Методы is_a? и instance_of? возвращают true, если объект является экземпляром данного класса или каких-либо подклассов.
2.is_a? Integer        #=> true
2.kind_of? Integer     #=> true      # алиас
2.instance_of? Integer #=> true

# Сравнение регистров - обычно возвращает true, если объект справа «принадлежит» или «является членом» объекта слева.
String === "zen"   #=> true
Range === (1..2)   #=> true
Array === [1,2,3]  #=> true
Integer === 2      #=> true



puts '                             allocate (Создание неинициализированного объекта)'

# allocate - метод, создает новый объект, но в отличие от метода new не вызывает конструктор, потому свойства объекта инициализированны не будут.

class Box
  attr_accessor :width

  def initialize(w) # не будет ошибки, если не передать параметры, тк метод allocate не вызывает конструктор
    @width = w
  end
end

# Создание неинициализированного объекта пр помощи allocate:
box = Box.allocate #=> #<Box:0x0000021356c5b988>

# вызываем свойство для неинициализированного объекта:
p box.width #=> nil

# Далее можем инициализировать свойства вручную
box.width = 5
p box.width #=> 5



puts '                                           Заморозка объектов'

# Object.freeze - метод позволяет предотвратить изменение свойств объекта, тоесть нельзя изменить его переменные экземпляра. Но переменная ссылающаяся на объект не становится константой и ее можно переопределить

# Object.frozen? - метод проверяет, заморожен ли данный объект, возвращает true, если объект заморожен, в противном случае возвращается false.

class Box
  def initialize(width)
    @width = width
  end
  def get_width         # accessor method
    @width
  end
  def set_width=(value) # setter method
    @width = value
  end
end

box = Box.new(10)

box.freeze              # Замораживаем объект
p box.frozen? #=> true  # Проверяем заморожен ли объект

# accessor methods - работают нормально
p box.get_width    #=> 10

# setter methods - выдают ошибку, тк объект заморожен
box.set_width = 30 #=> `setWidth=': can't modify frozen Box: #<Box:0x0 ...



puts '                                Объекты являющиеся атрибутами друг другу'

# Можно присвоить объекты свойствами друг друга одновременно

class Aaa
  attr_accessor :bbb
  def initialize(name)
    @name = name
  end
end

class Bbb
  attr_accessor :aaa
  def initialize(name)
    @name = name
  end
end

a = Aaa.new('aa')
b = Bbb.new('bb')

# Присваиваем объекты свойсвами друг друга
a.bbb = b
b.aaa = a

p a #<Aaa:0x00000271c8ff9830 @name="aa", @bbb=#<Bbb:0x00000271c8ff9380 @name="bb", @aaa=#<Aaa:0x00000271c8ff9830 ...>>>
p b #<Bbb:0x00000271c8ff9380 @name="bb", @aaa=#<Aaa:0x00000271c8ff9830 @name="aa", @bbb=#<Bbb:0x00000271c8ff9380 ...>>>
p a.bbb #<Bbb:0x00000271c8ff9380 @name="bb", @aaa=#<Aaa:0x00000271c8ff9830 @name="aa", @bbb=#<Bbb:0x00000271c8ff9380 ...>>>
p b.aaa #<Aaa:0x00000271c8ff9830 @name="aa", @bbb=#<Bbb:0x00000271c8ff9380 @name="bb", @aaa=#<Aaa:0x00000271c8ff9830 ...>>>













#

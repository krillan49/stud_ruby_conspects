puts '                              Паттерн Singleton (один объект на всех)'

# Singleton - это паттерн (шаблон проектирования) в ООП, который ограничивает создание экземпляра класса одним объектом. Это полезно, когда для координации действий в системе требуется ровно один объект.


# Hапример класс логгер, который будет сначала выводить на экран, а затем сохранять в файл. Если создавать экземпляры класса, то объектов создаётся много(занимаем память итд), а действие совершается одно(выполнение метода), поэтому лучше использовать метод клесса
class Logger
  # метод для записи в фаил:
  def self.log_foo(bar)
    f = File.open 'log.txt', 'a'
    f.puts bar # puts - записывает с новой строки ??
    f.close
  end
end
# чтото запишем:
Logger.log_foo 'Wow!'
# Недостаток в том, что постоянно открывается и закрывается файл log.txt - это увеличивает нагрузку, что критично, если программа будет большая и фаил большой, а способ записи 'a' всегда переходит в конец фаила.

# Эту проблему решает паттерн Singleton - сделать один объект на всех.
class Logger
  def initialize
    @f = File.open 'log.txt', 'a' # фаил будет создаваться/открываться при создании экземпляра(new)
  end

  @@x = Logger.new # при помощи переменной класса экземпляр класса инициализируется в момент обработки итератором кода класса, тоесть он создастся сразу и потом будет толлько вызываться

  def Logger.instance # название можно любое, но в синглтон принято instance
    return @@x # чтобы метод возвращал заранее созданный единственный экземпляр нашего класса
  end

  def log(bar) # теперь этот метод экзесмпляра будет вызываться от объекта созданного выше
    @f.puts bar # записываем переданный текст в фаил @f
    @f.flush # означает что все изменения будут сброшены на диск(втф?) можно не писать, тк само закроет при окончании программы, но можно написать отдельный метод для закрытия
  end

  # чтобы метод ".new" можно было вызвать только внутри класса (соответсвенно нельзя создать экземпляр вне класса)
  private_class_method :new
end

Logger.instance.log 'Kroker'



puts '                                       stdlib Singleton'

# https://ruby-doc.org/stdlib-2.5.3/libdoc/singleton/rdoc/Singleton.html

# В стандартной библиотеке ruby есть модуль Singleton, который реализует паттерн синглтон


# Перепишем программу используя встроенный модуль Singleton
require 'singleton'

class Logger
  include Singleton # создание экземпляра и метод instance и запрет создания внешнего экземпляра

  def initialize
    @f = File.open 'log.txt', 'a'
  end

  def log(bar)
    @f.puts bar
    @f.flush
  end
end

Logger.instance.log "It`s work!"


















#

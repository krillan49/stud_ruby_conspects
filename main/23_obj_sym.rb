puts '                                           Объекты и символы(Symbol)'

# объекты/экземпляры класса(instance)
# heap(куча) memory - название оперативной памяти в программировании
# объект - это определенная часть(участок) занятой оперативной памяти, которая "принадлежит" какому то фрагмету кода, существующий во время работы программы
# повторение фрагмента кода(например переменной) в программе(например циклом) создает отдельный объект для каждого повторения в отдельном участке операивной памяти
# Важно отметить, что переменная не “содержит” сам объект, это просто ссылка на область памяти где на самом деле этот объект хранится. Мы можем иметь любое количество переменных, указывающих на один и тот же объект.


# Символы(symbol) — это неизменяемая строка. Символы являются экземпляром (instance) класса Symbol

# Символы при повторном использовании их программой будут размещаться в оперативной памяти в одном и том же месте(будут являться одним объектом, массив символов содержит ссылки на один и тот же объект). Соответсвенно занимая меньше памяти символы служат для ускорения и оптимизации.
# Сравнить два символа - это операция сравнения двух указателей (ссылок). А операция сравнения двух строк реализована через побайтное сравнение, т.к. два разных объекта, находящихся в разных участках памяти
# символы являются неизменяемыми (immutable). Т.е. с ними нельзя выполнить “опасную” операцию, как например со строкой (типа upcase! или изменения одного элемента по индексу)

# Синтаксис. Символы начинаются со знака двоеточия(:) дальше пишется имя символа.
sym = :monday
puts sym      #=> monday
p :sunday     #=> :sunday

# Символ в кавычках может содержать пробелы, спецсимволы и интерполяцию
p und = :"Unknown\tday of #{10} week" #=> :"Unknown\tday of 10 week"

# Для символов работает получение срезов
p und[8,6]    #=> "day of"  # String
p und[2..6]   #=> "known"
p und[5]      #=> "w"

# Тк символы неизменяемы то нельзя изменить один элемент по индексу или выполнить метод с !
und[5] = ' '  # NoMethodError undefined method `[]='


# Отличие символов:

# equal? - сравнивает объекты по id(номер ячейки памяти)
puts "aaa" == "aaa"     #=> true
puts :aaa == :aaa       #=> true
puts "aaa".equal? "aaa" #=> false
puts :aaa.equal? :aaa   #=> true

# "aaa" и "aaa" это разные объекты(разные айди) с одинаковым значением, :aaa и :aaa это один и тот же объект(один айди)
puts "aaa".object_id #=> 200
puts "aaa".object_id #=> 220
puts :aaa.object_id  #=> 1243228
puts :aaa.object_id  #=> 1243228







#

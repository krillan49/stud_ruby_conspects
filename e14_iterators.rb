puts '                           Циклы: times, upto, downto, each и step. Оператор sleep'

# Итераторы — это не что иное, как методы, поддерживаемые коллекциями. Объекты, в которых хранится группа элементов данных, называются коллекциями. В Ruby массивы и хэши можно назвать коллекциями.

# Локальная переменная заданная в теле цикла { тут }, будет существовать только в этом цикле, за его пределами ее существовать не будет


puts '                                       Цикл, метод и оператор times'

# Цикл times нельзя найти в других языках программирования, так как он присутствует только в языке Ruby.
2.times{  # 2 раза выпонить тело цикла.
  puts("Ruby exercises")
}

3.times{print "sisya "} # Можно в одну строку

# times  с переменной. Цикл times считает от 0. Переменная задается пайпом(|переменная|)(pipe  в переводе труба), он означает что переменная внутри это параметр цикла, принимающий поочередно все задаваемые циклом значения
10.times{|i| (print "i = " + i.to_s + ", ")}


# Альтернативный синтаксис do end вместо {} для оператора times. Обычно он используется для большего чем 1 коллич операторов в теле цикла.
10.times do |el|  # Дополнительно задает в переменную 10 чисел от 0 до 9
	print el        # выводит заданные числа(0..9) заданное количество раз(10)
end

# Можно писать в одну строку
n.times do str.chop! end

# Использование методов в условии цикла times:
str = "Kroker"
str.size.times do |x|
  print str[x]
  sleep rand(0.02..0.3)
  print "-"
end


puts
puts '                                             Итератор each'

names = ["Bob", "Kevin", "Alex", "George"]
names.each do |nameA| # names.each - каждый элемент массива names
  puts nameA += "?"
end
# Дополнительная информация по методу each в разделе о массивах(array)


puts
puts '                                           Итератор map(collect)'

# Итератор сбора возвращает все элементы коллекции. Метод сбора не всегда должен быть связан с блоком. Метод collect возвращает всю коллекцию, независимо от того, является ли она массивом или хэшем.
# Используется метод collect, когда хотите что-то сделать с каждым из значений, чтобы получить новый массив. Например, этот код создает массив b , содержащий по 10 раз каждое значение в a .
a = [1,2,3,4,5]
b = a.collect{|x| 10*x}
p b #=> [10, 20, 30, 40, 50]
p a #=> [1, 2, 3, 4, 5]
# ПРИМЕЧАНИЕ — Меняет каждый элемент, соотв если условие в блоке не описывает какие-то элементы, то они заменяются на nil


puts
puts '                                    Циклы(методы) upto(вверх до) и downto(вниз до)'

# upto работает только в порядке возрастания
5.upto(10) {|x| print x} # Пока х между 5 и 10 включительно выводим х

"5".upto("10") {|x| print x} # Можно использовать и строки

5.upto(10) {|x| print x, " "} # Добавляем в цикл строку-пробел(новый элемент) при помощи запятой

-2.upto 2 do |x| # Пока х между -2 и 2 включительно выводим х
  print "#{x} "
end

puts
# downto работает только в порядке убывания
9.downto(2) {|x| print x}


puts
puts '                                          Цикл step'

# числа от 2х до 10, начиная с 2х с шагом в 3 помещаются в переменную, тоже самое можно сделать с числами в порядке уменьшения, тогда нужно задавать шаг отрицательным числом
2.step 10, 3 do |x|
  puts "#{x}"
end

2.step(10, 3).to_a #=> [2, 5, 8]
# С диапазоном
(2..10).step(2).sum #=> 30
(-2..-10).step(-2).to_a #=> [-2, -4, -6, -8, -10]


puts
puts '                                          Вложенные циклы'

# двойной цикл (иногда его называют “вложенный цикл”, “double loop”, если имеют в виду цикл по `i` - то “inner loop”, “внутренний цикл”)
arr = [ %w(a b c), %w(d e f), %w(g h i) ]
arr.each do |arr0|
  arr0.each {|el| print el}
end


puts
puts '                                          Оператор sleep'

# Оператор sleep позволяет ставить задержку с указанием времени в секундах.
def sl()  # Помещен в метод тк у него приоритет выполнения похоже в не зависимости от расположения
  sleep 3 # ждет 3 секунды
  sleep 0.5 # ждет пол секунды
end
